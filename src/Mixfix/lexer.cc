
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 225
#define YY_END_OF_BUFFER 226
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1348] =
    {   0,
      222,  222,  222,  222,  222,  222,  222,  222,  222,  222,
      222,  222,  222,  222,    0,    0,    0,    0,  213,  213,
        0,    0,  226,  224,  222,  223,  223,  115,  224,  113,
      115,  115,  115,  113,  114,  114,  115,  224,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,   17,  115,  115,  115,  115,  115,  115,  115,
      180,  224,  178,  178,  178,  180,  178,  178,  180,  224,
      180,  180,  180,  180,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  180,  180,  121,  224,
      117,  121,  121,  119,  118,  117,  121,  224,  121,  119,

      123,  123,  122,  123,  123,  123,  123,  196,  224,  191,
      192,  196,  182,  196,  194,  181,  185,  183,  184,  196,
      224,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  193,  201,  201,  201,  201,  201,
      199,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  222,  198,  224,  223,  207,  208,
      209,  202,  206,  211,  210,  212,  213,  214,  221,  215,
      220,  220,  216,  217,  215,  218,  219,  222,  115,    0,
      115,    0,    0,    0,  115,  115,  114,    0,  115,  115,
      115,  115,  115,  115,  115,   12,  115,  115,  115,  115,

      115,  115,   48,  115,  115,  115,   83,  115,  115,  115,
      115,  115,  115,  115,  115,   70,  115,  115,    5,  115,
      115,  115,   16,  115,   15,  115,   82,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,   43,   80,  115,
      115,  115,  115,  115,  115,  115,  115,   84,  115,   86,
      115,  115,  115,  115,  115,  115,  115,  115,  115,    6,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  180,    0,  179,  180,    0,    0,    0,  180,  180,
      173,  176,  177,  174,    0,  180,  180,  180,  180,  180,
      166,  180,  180,  180,  180,  180,  165,  154,  180,  180,

      180,  180,  153,  180,  152,  180,  180,  180,  180,  163,
      180,  180,  180,  159,  180,  154,  180,  167,  169,  180,
      180,  180,  180,  180,  124,  154,  180,  175,  121,    0,
      120,  121,    0,    0,    0,  121,  121,    0,  116,  118,
        0,    5,  222,  122,    0,    0,    0,    0,    0,  196,
        0,  195,  196,    0,    0,    0,  196,  196,  187,  186,
        0,  196,  196,  196,  196,  196,  196,  196,  196,  189,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  188,  201,    0,  200,  201,    0,    0,    0,  201,
      201,    0,  201,  201,  201,  197,  201,  201,  201,  197,

      201,  201,  201,  197,  197,  201,  201,  201,  197,  201,
      222,  198,    0,    0,    0,  207,  203,  204,  205,  211,
      213,  215,  215,  115,    0,    2,    2,  115,  115,  115,
       75,  115,  115,  115,  115,  115,  115,   74,  115,  115,
      115,  115,  115,  115,  115,  115,  115,   18,   83,  115,
      115,  115,  115,  115,  115,  115,  115,   34,  115,  115,
      115,  115,  115,  115,  115,  115,   82,  115,  115,    6,
       32,  115,  115,  115,   44,  115,   80,  115,  115,  115,
      115,  115,  115,   11,  115,  108,   21,  115,  115,   24,
       84,  115,   86,  115,  115,   41,  115,  115,  115,  115,

      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,   81,  115,  115,  115,  115,  115,  115,  115,  115,
      180,    0,    2,    2,  180,  180,  164,  180,  180,  168,
      170,  180,  180,  180,  180,  180,  180,  180,  180,  129,
      180,  154,  180,  171,  180,  180,  180,  180,  180,  180,
      147,  146,  180,  160,  180,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  162,  121,    0,    2,    2,    0,
        0,    0,    0,    2,    2,  196,    0,    2,    2,  196,
      196,  196,  196,  196,  196,  196,  196,  190,  196,  196,
      196,  196,  196,  196,  196,  190,  196,  196,  196,  196,

      196,  201,    0,    2,    2,  201,  201,  201,  197,  197,
      201,  201,  201,  201,  201,  197,    0,    0,    0,    0,
        2,    2,    2,    1,    2,    2,  115,  115,  115,   60,
       50,  115,  115,  115,  115,  115,  115,  115,  115,   57,
      115,   31,  115,   22,  115,  115,  115,  101,   25,  115,
      115,   65,  115,   26,  115,  115,  115,  115,  115,  115,
        9,   30,  115,    3,  115,  115,  115,  115,   20,  115,
        7,  115,  115,  104,   14,  115,  115,  115,  115,   17,
      115,  115,  115,  115,  115,   84,  115,  115,   42,  115,
      115,   79,   23,   27,  115,   99,  115,  115,  115,  109,

       71,  115,  115,  115,  115,   81,  115,    8,  115,  115,
      115,   66,  115,  115,    0,    0,    2,    2,    2,    1,
        2,    2,  180,  180,  128,  180,  180,  142,  180,  180,
      171,  180,  180,  172,  180,  180,  125,  180,  180,  180,
      130,  180,  180,  131,  180,  180,  132,    3,  180,  180,
      161,  180,  180,  141,  134,  180,  180,  155,  180,  180,
      180,  180,  180,  180,  162,    0,    0,    2,    2,    2,
        1,    2,    2,    0,    0,    1,    0,    0,    2,    2,
        2,    1,    2,    2,  196,  190,  196,  196,  196,  196,
      196,  196,  190,  196,  190,  196,  196,  196,  196,  190,

      190,  196,  196,  196,    0,    0,    2,    2,    2,    1,
        2,    2,  201,  201,  197,  197,  201,  201,  201,  201,
      201,  197,  201,  201,  201,  201,    2,    2,    1,    1,
        1,    1,    1,    2,    2,    2,   98,  115,   68,  115,
      102,  115,   29,   49,   62,  115,  115,  115,  115,  115,
       69,  115,   90,  115,   95,  115,   28,  115,  115,  115,
      115,  115,  115,  115,   63,  115,  115,   88,  105,   37,
      115,  115,  115,  115,  115,  115,   67,   19,   59,  115,
      115,   13,  115,  115,  115,  115,  115,  115,  115,   10,
      115,   79,  115,  115,   72,   85,   58,  115,  115,   45,

       40,  115,  115,   78,  115,  100,   52,  115,  115,    2,
        2,    1,    1,    1,    1,    1,    2,    2,    2,  127,
      157,  180,  180,  180,  148,  180,  180,  180,  180,  180,
      180,  180,  180,  180,  180,  180,  126,  143,  180,  180,
      180,  180,  180,  180,  180,  133,  155,  180,  137,  180,
      180,  180,  154,    2,    2,    1,    1,    1,    1,    1,
        2,    2,    2,    2,    2,    1,    1,    1,    1,    1,
        2,    2,    2,  190,  196,  196,  196,  196,  196,  196,
      196,  196,  196,  196,  196,  196,  196,  196,  196,  190,
        2,    2,    1,    1,    1,    1,    1,    2,    2,    2,

      197,  201,  201,  201,  201,  201,  197,  201,  201,    1,
        1,    1,    1,    1,    2,    2,   46,  115,  115,  115,
      115,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  115,  115,  115,   92,  115,    4,  115,  115,  115,
      115,  105,   64,   77,   32,  115,  115,  107,   67,  115,
      115,  115,  115,   21,   97,   56,  115,   39,   53,  115,
      115,  115,   85,  115,  115,   73,  115,  115,  115,  115,
       38,    1,    1,    1,    1,    1,    2,    2,  180,  180,
      145,  180,  180,    4,  140,  135,  180,  180,  180,  180,
      180,  180,  180,  146,  180,  180,  180,  180,  180,  180,

      139,  180,  180,  180,    1,    1,    1,    1,    1,    2,
        2,    1,    1,    1,    1,    1,    2,    2,  196,  196,
      190,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,    1,    1,    1,    1,    1,    2,    2,  201,  201,
      201,  201,  201,  201,    1,    1,  115,   68,  115,  115,
       51,   89,  115,   55,  115,  115,  115,   22,  115,  115,
      115,   94,  115,  115,  115,   93,  115,   76,   61,  115,
      115,  106,   91,  115,   24,  115,   23,  115,  115,   87,
       36,   47,  115,  115,    1,    1,  180,  180,  180,  180,
      180,  149,  180,  180,  180,  180,  147,  180,  150,  180,

      180,  180,  144,  180,  180,  156,  180,    1,    1,    1,
        1,  196,  196,  196,  196,  196,  196,  196,  196,  196,
      196,  196,    1,    1,  201,  201,  201,  201,  197,  115,
      115,  115,   89,  115,  115,   69,   31,   54,  115,   25,
      115,   26,  115,  115,  115,  115,  108,  115,   27,  115,
       35,  115,  115,  180,  180,  180,  180,  180,  180,  180,
      180,  131,  136,  180,  180,  180,  138,  158,  156,  180,
      196,  196,  196,  196,  196,  196,  196,  196,  201,  201,
      201,  197,  115,   60,  103,  115,   57,   69,   28,   65,
      115,  115,   20,  115,  115,  115,  111,   33,  180,  180,

      180,  180,  180,  180,  180,  180,  180,  151,  196,  196,
      196,  196,  196,  196,  196,  201,  201,  112,  115,  115,
      110,  115,  180,  180,  180,  180,  130,  180,  134,  158,
      196,  196,  196,  196,  196,   96,  115,  127,  128,  180,
      141,  196,   58,  180,  196,  145,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,   13,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static const YY_CHAR yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static const flex_int16_t yy_base[1435] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  645, 8847,  174, 8847, 8847,  309,  317, 8847,
      341, 8847,  361,  371,  373,  375,  379,  392,  385,  411,
      472,  423,  441,  484,  431,  463,  470,  474,  508,  515,
      529,  538,  541,  564,  582,  549,  592,  572,  599,  605,
      626,  321, 8847,  631,  637,  639,  650,  652,  658,  671,
      663,  717,  671,  689,  693,  685,  755,  719,  741,  766,
      777,  790,  798,  780,  819,  691,  821,  833,  846,  324,
     8847,  852,  854,  879,  881,  884,  887,  904,  907, 8847,

     8847,  933, 8847,  947,  961,  627,  622,  918,  366, 8847,
     8847,  962, 8847,  966,  968,  970,  988, 8847, 8847,  990,
      997, 1001, 1013, 1009, 1027, 1015, 1040, 1048, 1051, 1069,
     1074, 1082, 1094, 1096, 8847, 8847, 1100,  372, 1118, 1123,
     1126, 1137, 1144, 1190, 1151, 1148, 1156, 1177, 1198, 1201,
     1216, 1221, 1227, 1239, 1271, 8847, 1285, 1299,    0, 8847,
     8847, 8847,  464,    0, 8847, 8847,    0, 8847, 8847,    0,
     8847, 8847, 8847, 8847,  498, 8847, 8847,  188,  417,  430,
      467, 1271,  442,  405,  764,  744,  848, 1298,  551, 1036,
     1301,  695,  899,  495,  866,  976, 1187, 1290, 1304, 1319,

     1322, 1337, 1183, 1235, 1329, 1324, 1351, 1355, 1358, 1363,
     1366, 1369, 1384, 1391, 1376, 1394, 1396, 1402, 1405, 1415,
     1423, 1426, 1430, 1435, 1441, 1444, 1448, 1455, 1459, 1462,
     1470, 1473, 1477, 1480, 1482, 1491, 1501, 1503, 1506, 1511,
     1521, 1515, 1534, 1536, 1539, 1543, 1545, 1558, 1571, 1573,
     1579, 1582, 1586, 1604, 1576, 1606, 1613, 1626, 1617, 1644,
     1646, 1649, 1652, 1654, 1657, 1664, 1677, 1679, 1682, 1691,
     1687, 1706,  522, 1709, 1714, 1727,  563,  415, 1717, 1737,
     1739, 1741, 1745, 1759, 1768, 1778, 1782, 1784, 1790, 1803,
     1808, 1811, 1822, 1830, 1835, 1848, 1850, 1854, 1868, 1873,

     1876, 1894, 1879, 1902, 1881, 1907, 1920, 1925, 1931, 1933,
     1756, 1939, 1951, 1953, 1957, 1965, 1976, 1988, 1991, 1994,
     1996, 1999, 2014, 2019, 2025, 2039, 2043, 2045, 2051,  587,
     2057, 2063, 2081,  613,  602, 2084, 2092, 2109, 8847, 2111,
     2128, 2131, 2156, 8847, 2171,  603,  594,  594,  585, 2139,
      618, 2163, 2171, 2181,  690,  647, 2190, 2185, 2198, 2203,
     2216, 2216, 2227, 2230, 2238, 2249, 2263, 2269, 2271, 2282,
     2294, 2296, 2302, 2307, 2315, 2329, 2334, 2342, 2353, 2365,
     2367, 2373, 2378,  729, 2391, 2393, 2411,  731,  688, 2414,
     2422, 2431, 2418, 2441, 2447, 2453, 2461, 2465, 2467, 2480,

     2485, 2491, 2503, 2499, 2514, 2522, 2525, 2533, 2537, 2548,
     2573, 8847, 2591,  582,  563,    0, 8847, 8847, 8847,    0,
        0,    0, 8847, 1747,  742, 2606, 2660, 1788, 2097, 2072,
     1751, 2224, 2403, 2195, 2495, 2558, 2274, 2144, 2251, 2338,
     2593, 2304, 2556, 2599, 2617, 2624, 2626, 2388, 2545, 2628,
     2653, 2632, 2647, 2671, 2678, 2674, 2680, 2683, 2685, 2693,
     2703, 2707, 2713, 2715, 2717, 2721, 2726, 2739, 2744, 2746,
     2748, 2752, 2757, 2759, 2772, 2777, 2779, 2785, 2792, 2797,
     2799, 2803, 2806, 2811, 2825, 2829, 2832, 2834, 2836, 2843,
     2847, 2857, 2865, 2867, 2869, 2871, 2876, 2880, 2889, 2895,

     2903, 2907, 2909, 2915, 2917, 2913, 2921, 2927, 2936, 2939,
     2950, 2954, 2960, 2965, 2968, 2972, 2975, 2978, 2993, 2996,
     3001,  765, 3042, 3096, 3014, 3045, 3019, 3053, 2559, 3022,
     3056, 3099, 3068, 3096, 3107, 3130, 3136, 3138, 3142, 3157,
     3161, 3165, 3169, 3180, 3183, 3195, 3203, 3206, 3208, 3214,
     3226, 3229, 3241, 3247, 3252, 3260, 3265, 3271, 3283, 3291,
     3297, 3305, 3310, 3316, 3328, 3336,  775, 3373, 3427,  558,
      544,  532,  522,  508,  506, 3339,  795, 3481, 3535, 3350,
     3342, 3376, 3391, 3387, 3354, 3414, 3438, 3449, 3461, 3499,
     3453, 3495, 3501, 3503, 3538, 3507, 3546, 3557, 3559, 3565,

     3583, 3586,  820, 3612, 3666, 3615, 3712, 3589, 3623, 3626,
     3637, 3648, 3670, 3684, 3690, 3698,  482,  475,  829,  720,
        0,  465, 3732, 3760,  364, 3814, 3011, 3239, 3379, 3050,
     3077, 3420, 3659, 3592, 3104, 3218, 3618, 3737, 3723, 3505,
     3741, 3544, 3750, 3578, 3435, 3764, 3768, 3692, 3772, 3774,
     3779, 3783, 3817, 3786, 3822, 3824, 3826, 3844, 3846, 3850,
     3852, 3854, 3856, 3874, 3876, 3878, 3880, 3883, 3887, 3898,
     3901, 3906, 3908, 3910, 3916, 3919, 3928, 3931, 3934, 3941,
     3943, 3946, 3952, 3961, 3964, 3967, 3971, 3976, 3985, 3989,
     3995, 3997, 3999, 4004, 4007, 4009, 4018, 4028, 4030, 4036,

     4040, 4042, 4050, 4054, 4060, 4063, 4068, 4074, 4081, 4086,
     4089, 4101, 4104, 4107,  830,  728,  442, 4133,  440, 4156,
      448, 4210, 4129, 4143, 4137, 4167, 4170, 4178, 4181, 4192,
     4214, 4232, 4217, 4236, 4240, 4258, 4261, 4263, 4266, 4284,
     4286, 4289, 4292, 4297, 4311, 4317, 4322, 4325, 4336, 4344,
     4350, 4355, 4363, 4369, 4374, 4387, 4398, 4400, 4406, 4411,
     4424, 4426, 4438, 4449, 4430,  908,  775,  438, 4469,  423,
     4492,  527, 4546,  429,  423,    0,  932,  806,  398, 4482,
      391, 4600,  830, 4654, 4495, 4472, 4506, 4517, 4528, 4549,
     4557, 4571, 4603, 4569, 4611, 4514, 4614, 4626, 4641, 4582,

     4665, 4668, 4676, 4673,  933,  838,  388, 4708,  362, 4731,
      868, 4785, 4679, 3374, 4697, 4711, 1493, 4735, 4750, 4754,
     4756, 4788, 4796, 4799, 4810, 4831, 4851, 2142,    0, 4874,
     4864,  332, 4928, 4880,  320, 4907, 4203, 4818, 4503, 4634,
     4820, 4434, 4331, 4526, 4580, 4608, 4854, 4791, 4880, 4894,
     4922, 4932, 4892, 4934, 4936, 4942, 4960, 4962, 4965, 4968,
     4974, 4983, 4987, 4992, 4998, 5001, 5007, 5011, 5016, 5019,
     5021, 5025, 5034, 5039, 5043, 5048, 5061, 5063, 5068, 5071,
     5073, 5075, 5086, 5094, 5096, 5104, 5106, 5109, 5114, 5119,
     5124, 5128, 5132, 5137, 5139, 5142, 5150, 5157, 5164, 5168,

     5170, 5177, 5179, 5182, 5189, 5197, 5200, 5202, 5204, 5230,
     4121, 5253, 5243,    0,  313, 5307, 5260, 5361, 5279, 5233,
     5278, 5284, 5310, 5325, 5328, 5330, 5333, 5364, 5372, 5383,
     5375, 5386, 5404, 5408, 5412, 5423, 5431, 5435, 5437, 5449,
     5455, 5457, 5463, 5469, 5477, 5491, 5496, 5499, 5502, 5504,
     5523, 5525, 5527, 5553, 5288, 5576, 5587,    0,  306, 5630,
     5559, 5684, 5602, 5613, 5321, 5738, 5641, 5792,  296, 5846,
     5613, 5900, 5656, 5549, 5661, 5664, 5687, 5695, 5710, 5707,
     5718, 5666, 5749, 5752, 5757, 5763, 5795, 5803, 5814, 5806,
     5857, 5403, 5954, 5872, 6008,  289, 6062, 5874, 6116, 5885,

     5818, 5881, 5904, 5926, 5941, 5965, 5976, 5826, 5979, 5939,
     5930, 5989, 6170, 6037, 6046, 6024, 5210, 5607, 5731, 5720,
     5772, 5935, 5893, 5989, 6026, 5247, 6055, 6049, 6074, 6070,
     5761, 6068, 6082, 6088, 6097, 6109, 6120, 6122, 6128, 6130,
     6150, 6141, 6173, 6176, 6178, 6180, 6182, 6184, 6188, 6203,
     6207, 6209, 6216, 6221, 6227, 6231, 6235, 6239, 6242, 6245,
     6249, 6253, 6260, 6264, 6267, 6272, 6275, 6278, 6282, 6286,
     6297, 6327, 6312, 6327,    0, 6338, 6351, 6361, 6350, 6362,
     6370, 6374, 6376, 6382, 6388, 6394, 6400, 6406, 6414, 6418,
     6420, 6432, 6440, 6445, 6453, 6458, 6466, 6478, 6480, 6484,

     6503, 6505, 6507, 6511, 6537, 6554, 6552,    0, 6563, 6576,
     6586, 6593, 6606, 6601,    0, 6617, 6626, 6635, 6625, 6637,
     6649, 6651, 6657, 6662, 6675, 6686, 6688, 6700, 6706, 6566,
     6714, 6734, 6717, 6738,    0, 6749, 6762, 6772, 6752, 6773,
     6777, 6779, 6785, 6791, 6817, 6831, 6818, 6318, 6347, 6797,
     6455, 6822, 6830, 6517, 6832, 6622, 6836, 6660, 6850, 6854,
     6856, 6720, 6859, 6863, 6877, 6758, 6882, 6884, 6888, 6890,
     6892, 6902, 6910, 6913, 6915, 6920, 6922, 6924, 6928, 6934,
     6943, 6947, 6952, 6954, 6980, 6995, 6985, 6991, 6996, 6999,
     7004, 7010, 7023, 7025, 7037, 7043, 7049, 7055, 7063, 7069,

     7074, 7077, 7082, 7097, 7100, 7108, 7111, 7137, 7128, 7154,
     7163, 7153, 7159, 7164, 7167, 7172, 7185, 7191, 7193, 7197,
     7215, 7217, 7228, 7243, 7240, 7244, 7248, 7262, 7266, 7268,
     7270, 7272, 6965, 7277, 7280, 7291, 7299, 7301, 7304, 7306,
     7312, 7319, 7324, 7330, 7337, 7334, 7344, 7349, 7355, 7357,
     7362, 7364, 7367, 7375, 7386, 7398, 7406, 7410, 7421, 7425,
     7429, 7433, 7444, 7447, 7458, 7466, 7469, 7477, 7488, 7491,
     7496, 7509, 7511, 7514, 7517, 7536, 7538, 7540, 7542, 7561,
     7564, 7567, 7570, 7439, 7575, 7582, 7588, 7593, 7596, 7600,
     7603, 7607, 7611, 7614, 7625, 7629, 7632, 7635, 7637, 7640,

     7658, 7661, 7664, 7666, 7687, 7689, 7691, 7712, 7714, 7716,
     7734, 7740, 7742, 7760, 7766, 7745, 7768, 7669, 7764, 7774,
     7720, 7722, 7789, 7792, 7800, 7812, 7815, 7818, 7820, 7823,
     7841, 7843, 7845, 7866, 7868, 7778, 7864, 7870, 7889, 7891,
     7893, 7897, 7899, 7911, 7917, 7919, 8847, 7957, 7968, 7979,
     7990, 8001, 8008, 8018, 8025, 8035, 8042, 8052, 8059, 8069,
     8076, 8086, 8097, 8108, 8119, 8129, 8135, 8142, 8149, 8156,
     8163, 8173, 8184, 8194, 8205, 8215, 8226, 8237, 8247, 8258,
     8268, 8279, 8290, 8301, 8312, 8323, 8334, 8345, 8356, 8367,
     8378, 8389, 8400, 8411, 8422, 8433, 8444, 8455, 8466, 8477,

     8488, 8499, 8510, 8521, 8532, 8539, 8550, 8561, 8572, 8583,
     8594, 8605, 8616, 8627, 8638, 8649, 8656, 8667, 8678, 8689,
     8700, 8711, 8722, 8729, 8740, 8751, 8762, 8773, 8784, 8791,
     8802, 8813, 8824, 8835
    } ;

static const flex_int16_t yy_def[1435] =
    {   0,
     1347,    1, 1347,    3, 1347,    5, 1348, 1348, 1347,    9,
     1347,   11,   11,   13, 1349, 1349, 1350, 1350, 1351, 1351,
     1352, 1352, 1347, 1347, 1347, 1347, 1347, 1353, 1354, 1347,
     1353, 1347, 1353, 1353, 1353, 1353, 1353, 1347, 1353, 1353,
     1353, 1353, 1353,   41, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353,   41, 1353, 1353, 1353, 1353, 1353,
     1355, 1356, 1347, 1355, 1355, 1355, 1355, 1355, 1355, 1347,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355,   77, 1355, 1355, 1355, 1355, 1357, 1358,
     1347, 1357, 1357, 1357, 1357, 1357, 1357, 1347, 1357, 1347,

     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1359, 1360, 1347,
     1347, 1359, 1347, 1359, 1359, 1359, 1359, 1347, 1347, 1359,
     1347, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1347, 1347, 1361, 1362, 1361, 1361,
     1361, 1361, 1347, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1347, 1347, 1347, 1347, 1363, 1347,
     1347, 1347, 1347, 1364, 1347, 1347, 1365, 1347, 1347, 1366,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1353, 1354,
     1353, 1367, 1354, 1354, 1353, 1353, 1353, 1347, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1355, 1356, 1355, 1355, 1368, 1356, 1356, 1355, 1355,
     1355, 1355, 1355, 1355, 1347, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,

     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
       77, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1357, 1358,
     1357, 1357, 1369, 1358, 1358, 1357, 1357, 1347, 1347, 1357,
     1347, 1357, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1359,
     1360, 1359, 1359, 1370, 1360, 1360, 1359, 1359, 1359, 1359,
     1347, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1361, 1362, 1361, 1361, 1371, 1362, 1362, 1361,
     1361, 1347, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,

     1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361, 1361,
     1347, 1347, 1347, 1347, 1347, 1363, 1347, 1347, 1347, 1364,
     1365, 1366, 1347, 1353, 1372, 1373, 1373, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1355, 1374, 1375, 1375, 1355, 1355, 1355, 1355,   77, 1355,
     1355, 1355, 1355,   77, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1357, 1376, 1377, 1377, 1347,
     1347, 1347, 1347, 1378, 1378, 1359, 1379, 1380, 1380, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,

     1359, 1361, 1381, 1382, 1382, 1361, 1361, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1347, 1347, 1372, 1372,
     1378,  427, 1383, 1384,  427, 1385, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1374, 1374,  524, 1386,  524, 1387,
      524, 1388, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1355, 1355, 1355, 1355, 1355, 1376, 1376,  569, 1389,  569,
     1390,  569, 1391, 1347, 1347, 1392, 1379, 1379,  579, 1393,
      579, 1394,  579, 1395, 1359, 1359, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359, 1359,

     1359, 1359, 1359, 1359, 1381, 1381,  605, 1396,  605, 1397,
      605, 1398, 1361,  607, 1361, 1361,  607, 1361, 1361, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1383, 1383, 1392, 1384,
     1399,  830, 1400, 1378,  427, 1401, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,
     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353,

     1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1386,
     1386, 1387, 1402,  912,  912, 1403, 1378, 1404, 1405, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1389, 1389, 1390, 1407,  956,  956, 1408,
     1378, 1409, 1410, 1411, 1411, 1412, 1413, 1412,  968, 1414,
     1378, 1415, 1416, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1418, 1418, 1419, 1420, 1419,  995, 1421, 1378, 1422, 1423,

     1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1424, 1425,
     1425, 1426, 1427, 1428, 1429, 1429, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1402, 1402, 1426,  912, 1431, 1405, 1405, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,

     1406, 1406, 1406, 1406, 1407, 1407, 1426,  956, 1432, 1410,
     1410, 1413, 1413, 1426,  968, 1433, 1416, 1416, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1420, 1420, 1426,  995, 1434, 1423, 1423, 1424, 1424,
     1424, 1424, 1424, 1424, 1428, 1428, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1431, 1431, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,

     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1432, 1432, 1433,
     1433, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417,
     1417, 1417, 1434, 1434, 1424, 1424, 1424, 1424, 1424, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1417, 1417, 1417, 1417, 1417, 1417, 1417, 1417, 1424, 1424,
     1424, 1424, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430,
     1430, 1430, 1430, 1430, 1430, 1430, 1430, 1430, 1406, 1406,

     1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1417, 1417,
     1417, 1417, 1417, 1417, 1417, 1424, 1424, 1430, 1430, 1430,
     1430, 1430, 1406, 1406, 1406, 1406, 1406, 1406, 1406, 1406,
     1417, 1417, 1417, 1417, 1417, 1430, 1430, 1406, 1406, 1406,
     1406, 1417, 1430, 1406, 1417, 1406,    0, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347
    } ;

static const flex_int16_t yy_nxt[8904] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1134,  160,  161,  180,  161,  160,
      160, 1114,  162,  160,  161,  179,  161,  160,  160,  272,
      162, 1107,  329,  181,  182,  137,  163,  137, 1074,  184,
      622,  137,  137,  278,  163,  137,  335,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166, 1012,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  350,  186,  169,  173,  174,  180,
      383,  180,  807,  180,  622,  181,  182,  180,  356,  834,
      175,  187,  187,  180,  389,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181, 1347,  183,  807,  181,
      182,  779,  189,  181,  190,  181, 1347,  277,  779,  180,
      176,  177,  191,  169,  169,  180,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182,  339,  179,  180,
      339,  181,  182,  768,  181,  181,  175,  181,  182,  180,
      179,  193,  184,  202,  194,  181,  182,  195,  768,  216,
      717,  217,  717,  203,  184,  181,  182,  204,  717,  205,
      417,  180,  418,  917,  218,  180,  176,  177,  180,  169,
      180,  206,  180,  207,  208,  622,  419,  181,  182,  412,
      209,  181,  188,  412,  181,  182,  181,  182,  181,  182,

      222,  196,  219,  180,  221,  197,  220,  423,  423,  198,
      199,  223,  200,  179,  224,  201,  180,  179,  225,  181,
      182,  210,  211,  180,  212,  434,  776,  213,  776,  214,
      272,  215,  181,  182,  226,  227,  344,  180,  228,  181,
      182,  231,  229,  344,  278,  232,  180,  768,  230,  180,
      423,  423,  961,  181,  182,  233,  235,  180,  775,  180,
      236,  234,  181,  182,  240,  181,  182,  237,  238,  774,
      239,  272,  180,  181,  182,  181,  182,  618,  241,  259,
      180,  242,  260,  261,  243,  278,  244,  245,  181,  182,
      246,  428,  262,  617,  247,  329,  181,  182,  264,  575,

      180,  248,  265, 1347,  334,  574,  266,  180,  573,  335,
      249,  250,  251,  180,  572,  252,  181,  182,  267,  253,
      254,  329,  255,  181,  182,  256,  350,  257,  258,  181,
      182,  263,  268,  269,  273,  335,  349,  270,  348,  273,
      356,  274,  279,  271, 1347,  273,  274,  273, 1347,  355,
      275,  276,  274,  280,  274,  275,  276, 1347,  273,  281,
      273,  275,  276,  275,  276,  274,  273,  274,  282,  283,
     1347,  273,  284,  274,  275,  276,  275,  276,  274,  273,
      275,  275,  275,  285,  275, 1347,  274,  275,  276, 1347,
      388, 1347,  275,  273,  275,  275,  276,  273,  350,  273,

      274,  273, 1347,  180,  274,  295,  274,  286,  274,  275,
      276,  301,  356,  275,  276,  275,  276,  275,  276,  181,
      182, 1347,  619,  275,  275,  273, 1347,  273,  296, 1347,
      715,  297,  274,  299,  274,  326,  300,  383,  298,  383,
      432,  275,  276,  275,  276, 1347,  307,  287, 1347,  273,
      424,  389,  180,  389,  288,  289,  274,  290,  427,  291,
      292,  293,  294,  273,  620,  275,  276,  308,  181,  182,
      274,  309,  180,  521,  273,  426, 1347,  766, 1347,  275,
      276,  274, 1347,  566,  302,  273,  303,  716,  181,  182,
      275,  276,  274,  310,  304, 1347,  311,  767,  273,  305,

      306,  275,  276,  576,  313,  274,  273, 1347,  777,  319,
      312,  272, 1347,  274,  275,  276, 1347,  778,  314,  272,
      320,  321,  275,  276,  272,  322,  323,  273,  602,  273,
      315, 1347,  317,  316,  274,  318,  274,  424,  521, 1347,
      805,  273,  806,  275,  276,  275,  276,  327,  274,  324,
      779,  620,  716,  328,  330,  971,  180,  275,  276,  325,
      330,  331,  330,  336,  187,  187, 1347,  331,  337,  331,
      332,  333,  181,  182,  180, 1347,  332,  333,  332,  333,
      338,  339,  338,  338,  338,  338, 1347,  330,  807,  330,
      181,  182,  330,  998,  331,  330,  331,  340,  340,  331,

      435, 1347,  331,  332,  333,  332,  333,  180,  332,  333,
     1347,  332,  341,  332,  332,  330,  566,  332, 1347, 1347,
     1347, 1347,  331,  181,  182,  332,  351,  332,  433, 1347,
      767,  332,  333,  352,  343,  344,  345,  345,  343,  343,
      576,  602,  353,  354,  346, 1347,  342,  347,  345,  344,
      345,  345,  345,  345,  778,  806,  332,  332,  346, 1347,
     1347,  347,  345,  344,  345,  345,  345,  345, 1347, 1347,
      351, 1347,  346,  357,  351,  347,  351,  352,  351, 1347,
      358,  352, 1347,  352,  180,  352,  353,  354, 1347,  359,
      353,  354,  353,  354,  353,  354,  351, 1347,  351, 1347,

      181,  182, 1347,  352, 1347,  352,  353,  353,  360,  351,
      353, 1347,  353,  354,  353,  361,  352,  351,  353, 1347,
      353,  351, 1347,  351,  352,  353,  354, 1347,  352, 1347,
      352, 1347, 1347,  353,  354,  351, 1347,  353,  354,  353,
      354,  368,  352,  365,  180,  362, 1347, 1347,  351,  353,
      353,  353,  354,  363, 1347,  352,  351, 1347,  364,  351,
      181,  182, 1347,  352,  353,  354,  352,  366, 1347,  369,
      367,  370,  353,  354,  372,  353,  354,  351,  373, 1347,
     1347,  374,  351,  429,  352,  371, 1347, 1347, 1347,  352,
      351, 1347, 1347,  353,  354,  375,  376,  352,  353,  354,

     1347, 1347,  351, 1347,  351, 1347,  353,  354,  384,  352,
     1347,  352, 1347, 1347,  377,  385,  379,  378,  353,  354,
      353,  354, 1347, 1347,  386,  387,  384, 1347, 1347,  390,
     1347,  384, 1347,  385,  384,  380,  382,  391,  385,  381,
     1347,  385,  386,  387, 1347,  384, 1347,  386,  387, 1347,
      386,  387,  385,  386,  386, 1347,  384,  386, 1347,  384,
     1347,  386,  392,  385,  384,  386,  385,  386, 1347, 1347,
     1347,  385,  386,  387, 1347,  386,  387, 1347, 1347, 1347,
      386,  387, 1347,  402, 1347,  384, 1347,  401, 1347, 1347,
      399,  180,  385,  396, 1347,  180,  386,  386,  384, 1347,

      400,  386,  387, 1347,  396,  385,  384,  181,  182,  384,
     1347,  181,  182,  385,  386,  387,  385,  436, 1347, 1347,
      393,  403,  386,  387,  384,  386,  387,  394,  395,  384,
     1347,  385,  396,  397,  398,  384,  385, 1347, 1347,  404,
      386,  387,  385,  180,  405,  386,  387,  384, 1347, 1347,
      396,  386,  387,  396,  385, 1347, 1347, 1347, 1347,  181,
      182,  406, 1347,  386,  387,  410,  407,  408, 1347, 1347,
     1347,  409,  411,  412,  413,  413,  411,  411,  446,  425,
      181,  181,  414, 1347,  181,  415,  413,  412,  413,  413,
      413,  413,  181, 1347,  181, 1347,  414, 1347,  180,  415,

      413,  412,  413,  413,  413,  413, 1347,  181,  181,  180,
      414,  181,  180,  415,  181,  182, 1347, 1347, 1347,  181,
      437,  181, 1347,  181,  181,  181,  182,  180,  181,  182,
      180, 1347,  180,  438, 1347,  430, 1347,  180,  431, 1347,
     1347, 1347, 1347,  181,  182,  180,  181,  182,  181,  182,
      181,  181,  443,  181,  182,  448,  439,  440,  441,  180,
     1347,  181,  182,  180,  444,  442,  180,  447, 1347, 1347,
     1347,  180, 1347, 1347,  180,  181,  182,  180, 1347,  181,
      182,  445,  181,  182,  180,  450,  451,  181,  182,  453,
      181,  182,  180,  181,  182,  449, 1347, 1347, 1347,  180,

      181,  182,  180,  452,  180, 1347,  454, 1347,  181,  182,
      180, 1347,  455,  180,  456,  181,  182, 1347,  181,  182,
      181,  182,  457,  180,  260, 1347,  181,  182,  459,  181,
      182,  180, 1347,  460,  180, 1347, 1347, 1347,  180,  181,
      182,  458, 1347,  180, 1347, 1347, 1347,  181,  182,  180,
      181,  182,  180,  463,  181,  182,  180, 1347,  461,  181,
      182,  464,  462,  180, 1347,  181,  182,  180,  181,  182,
      180, 1347,  181,  182, 1347,  465, 1347, 1347,  180,  181,
      182,  180, 1347,  181,  182,  180,  181,  182,  180,  466,
      180,  470,  467,  468,  181,  182, 1347,  181,  182,  180,

     1347,  181,  182, 1347,  181,  182,  181,  182,  469,  180,
     1347,  180, 1347,  471,  180,  181,  182,  260,  474,  180,
      473,  472,  475,  180,  383,  181,  182,  181,  182,  180,
      181,  182, 1347,  383, 1347,  181,  182,  383, 1003,  181,
      182,  476,  180, 1347,  180,  181,  182,  180, 1347,  481,
      477,  180, 1347,  180,  478,  482,  479, 1347,  181,  182,
      181,  182,  480,  181,  182,  484,  180,  181,  182,  181,
      182, 1347, 1347,  485,  487, 1347, 1347, 1347,  483,  180,
     1347,  180,  181,  182,  180, 1347, 1347,  180,  486,  488,
      180, 1347,  489,  490,  180,  181,  182,  181,  182, 1347,

      181,  182,  491,  181,  182,  494,  181,  182,  492, 1347,
      181,  182,  180, 1347,  180, 1347,  495,  493, 1347,  501,
     1347,  180,  497, 1347,  496,  180,  498, 1347,  181,  182,
      181,  182, 1347, 1347,  180, 1347,  502,  181,  182,  503,
     1347,  181,  182,  504,  499, 1347,  260, 1347, 1347,  500,
      181,  182,  180,  506,  180, 1347,  505,  180, 1347, 1347,
      180,  508,  180, 1347,  507,  180, 1347, 1347,  181,  182,
      181,  182,  180,  181,  182,  510,  181,  182,  181,  182,
     1347,  181,  182, 1347,  509,  180,  511,  180,  181,  182,
      180,  515, 1347, 1347,  514,  180, 1347,  512, 1347,  180,

      513,  181,  182,  181,  182,  519,  181,  182, 1347,  516,
     1347,  181,  182,  520,  273,  181,  182,  273, 1347,  517,
     1347,  274,  273, 1347,  274,  273, 1347,  518,  523,  274,
      275,  276,  274,  275,  276,  522,  275,  275,  275,  285,
      275,  275,  276, 1347, 1347,  273, 1347,  273,  275,  273,
      275,  524,  274,  273,  274,  180,  274, 1347, 1347,  180,
      274,  275,  276,  275,  276,  275,  276,  273, 1347,  275,
      276,  181,  182, 1347,  274,  181,  182,  275,  275,  275,
      275,  275, 1347,  275,  276,  272,  273,  272, 1347,  275,
      273,  275,  273,  274,  548,  272,  180,  274,  273,  274,

      549,  550,  275,  276, 1347,  274,  275,  276,  275,  276,
      526,  273,  181,  182,  275,  276,  273,  527,  274,  273,
      275,  275,  525,  274,  291, 1347,  274,  275,  276, 1347,
      273,  627,  275,  276, 1347,  275,  276,  274,  273, 1347,
     1347,  528,  529,  273, 1347,  274,  275,  276,  530, 1347,
      274,  531, 1347, 1347,  275,  276,  273, 1347,  273,  275,
      276, 1347,  273,  274, 1347,  274, 1347, 1347, 1347,  274,
      532, 1347,  275,  276,  275,  276,  273,  534,  275,  276,
      533,  273, 1347,  274,  273, 1347, 1347,  273,  274,  273,
     1347,  274,  275,  276,  274, 1347,  274,  275,  276,  535,

      275,  276,  273,  275,  276,  275,  276, 1347,  539,  274,
      273,  536,  540,  537, 1347,  273, 1347,  274,  275,  276,
     1347,  538,  274, 1347,  541, 1347,  275,  276,  273, 1347,
      542,  275,  276,  273, 1347,  274, 1347,  543, 1347,  273,
      274,  273, 1347, 1347,  275,  276,  274,  273,  274,  275,
      276, 1347,  545, 1347,  274,  275,  276,  275,  276,  273,
      544,  273,  547,  275,  276,  273,  274,  553,  274, 1347,
      546,  551,  274,  273, 1347,  275,  276,  275,  276, 1347,
      274,  275,  276, 1347,  273, 1347,  552, 1347, 1347,  275,
      276,  274, 1347, 1347,  555,  556,  273,  554, 1347,  273,

      275,  276,  273,  274,  273,  557,  274,  273,  558,  274,
     1347,  274,  275,  276,  274,  275,  276, 1347,  275,  276,
      275,  276,  273,  275,  276, 1347,  560,  273, 1347,  274,
     1347, 1347, 1347,  273,  274, 1347, 1347,  559,  275,  276,
      274,  562,  561,  275,  276, 1347, 1347,  273, 1347,  275,
      276,  273, 1347,  273,  274, 1347, 1347, 1347,  274,  330,
      274, 1347,  563,  275,  276,  330,  331,  275,  276,  275,
      276,  330,  331,  564, 1347,  332,  333, 1347,  331, 1347,
      180,  332,  333, 1347, 1347, 1347,  565,  332,  341,  567,
      332,  332,  330, 1347,  332,  568,  181,  182,  629,  331,

      330, 1347,  332, 1347,  332,  180,  569,  331,  332,  333,
      338,  339,  338,  338,  338,  338,  332,  333, 1347,  330,
      570,  181,  182,  571, 1347, 1347,  331,  340,  340, 1347,
     1347,  628, 1347,  332,  332,  332,  333,  332,  332,  330,
     1347,  332,  621, 1347,  183,  621,  331,  351,  183,  332,
     1347,  332,  180, 1347,  352,  332,  333,  343,  344,  345,
      345,  343,  343,  353,  354, 1347, 1347,  346,  181,  182,
      347,  351,  345,  344,  345,  345,  345,  345,  352,  351,
      332,  332,  346, 1347, 1347,  347,  352,  353,  354,  577,
      353,  353, 1347,  351,  353,  353,  361, 1347,  351,  579,

      352,  578,  353,  180,  353,  352,  351, 1347, 1347,  353,
      354,  351, 1347,  352,  353,  354, 1347, 1347,  352,  181,
      182,  632,  353,  354,  351,  353,  353,  353,  354,  353,
     1347,  352,  180,  353,  353,  351, 1347,  353,  351,  353,
      353,  354,  352, 1347, 1347,  352,  351, 1347,  181,  182,
     1347,  353,  354,  352,  353,  354, 1347,  351, 1347,  180,
      580, 1347,  353,  354,  352,  581,  582,  630,  353,  353,
      583,  351, 1347,  353,  354,  181,  182,  351,  352,  351,
     1347, 1347,  180,  584,  352, 1347,  352,  353,  354,  588,
      351,  636,  585,  353,  354,  353,  354,  352,  181,  182,

      635,  589,  351,  586,  351, 1347,  353,  354, 1347,  352,
      351,  352,  180, 1347,  587,  351, 1347,  352,  353,  354,
      353,  354,  352,  351,  590, 1347,  353,  354,  181,  182,
      352,  353,  354,  592, 1347, 1347, 1347,  351, 1347,  353,
      354,  591,  351,  643,  352,  593,  180,  588, 1347,  352,
      351,  594,  595,  353,  354, 1347, 1347,  352,  353,  354,
     1347,  351,  181,  182,  596, 1347,  353,  354,  352, 1347,
     1347,  597,  598,  351, 1347,  351,  637,  353,  354,  638,
      352,  351,  352, 1347, 1347,  599,  384, 1347,  352,  353,
      354,  353,  354,  385, 1347,  600,  180,  353,  354,  384,

     1347,  384,  386,  387, 1347, 1347,  385, 1347,  385, 1347,
      601,  180,  181,  182, 1347,  386,  387,  386,  392,  603,
      386,  386,  384, 1347,  386,  604,  384,  181,  182,  385,
      384, 1347,  386,  385,  386, 1347,  605,  385,  386,  387,
      386,  386,  386,  387,  386, 1347,  386,  387, 1347,  384,
     1347, 1347,  386,  631,  386,  384,  385, 1347, 1347, 1347,
      396,  384,  385,  386,  386,  386,  387,  606,  385,  384,
     1347,  386,  387,  384,  396,  384,  385,  386,  387, 1347,
      385, 1347,  385,  386,  386,  386,  387, 1347,  384,  386,
      387,  386,  387,  384,  396,  385,  607, 1347,  396,  384,

      385, 1347, 1347,  180,  386,  387,  385,  384, 1347,  386,
      387,  384, 1347,  609,  385,  386,  387, 1347,  385,  181,
      182, 1347,  384,  386,  387,  608, 1347,  386,  387,  385,
      384,  396,  633,  384, 1347,  610, 1347,  385,  386,  387,
      385,  384, 1347,  396, 1347,  384,  386,  387,  385,  386,
      387, 1347,  385,  180,  611, 1347,  384,  386,  387, 1347,
      614,  386,  387,  385,  180,  612,  180, 1347,  613,  181,
      182,  615,  386,  387,  411,  412,  413,  413,  411,  411,
      181,  182,  181,  182,  414,  644,  634,  415,  272, 1347,
      726,  616,  413,  412,  413,  413,  413,  413,  272, 1347,

     1347,  180,  414,  727,  272,  415,  621,  180, 1347,  621,
     1347, 1347, 1347, 1347,  623,  621,  621,  181,  182,  621,
     1347,  639,  640,  181,  182,  180,  624,  621, 1347,  621,
      625,  626,  180, 1347,  180, 1347,  180,  641,  642, 1347,
      180,  181,  182, 1347, 1347,  645, 1347,  646,  181,  182,
      181,  182,  181,  182,  647,  180,  181,  182,  621,  621,
      621,  180,  651,  621, 1347, 1347, 1347,  648,  623,  621,
      621,  181,  182,  621, 1347, 1347,  649,  181,  182,  180,
      624,  621,  180,  621,  625,  626,  180, 1347,  180, 1347,
      650,  180,  652,  180,  655,  181,  182, 1347,  181,  182,

      260,  180,  181,  182,  181,  182, 1347,  181,  182,  181,
      182,  180,  621,  621, 1347,  180,  653,  181,  182, 1347,
     1347,  180,  654,  180, 1347,  180,  656,  181,  182,  180,
      657,  181,  182,  658,  180, 1347,  659,  181,  182,  181,
      182,  181,  182,  660,  661,  181,  182,  180, 1347,  663,
      181,  182,  180, 1347,  180, 1347,  180, 1347,  662, 1347,
      180, 1347, 1347,  181,  182,  180, 1347,  180,  181,  182,
      181,  182,  181,  182, 1347,  665,  181,  182, 1347,  664,
      180,  181,  182,  181,  182,  180,  670,  180, 1347,  668,
     1347,  667,  666,  180, 1347,  669,  181,  182, 1347, 1347,

      180,  181,  182,  181,  182,  180,  671,  180, 1347,  181,
      182,  180, 1347, 1347,  180,  672,  181,  182, 1347,  180,
     1347,  181,  182,  181,  182,  674,  675,  181,  182,  673,
      181,  182, 1347,  180,  677,  181,  182,  180,  676,  679,
      180, 1347,  180, 1347,  180, 1347, 1347, 1347,  678,  181,
      182,  180, 1347,  181,  182,  180,  181,  182,  181,  182,
      181,  182, 1347,  681, 1347,  180,  684,  181,  182, 1347,
      680,  181,  182,  180, 1347,  180, 1347,  180,  682,  180,
      683,  181,  182, 1347,  180, 1347,  685,  686,  180,  181,
      182,  181,  182,  181,  182,  181,  182,  180, 1347,  688,

      181,  182, 1347,  180,  181,  182,  690, 1347, 1347,  691,
      687,  180, 1347,  181,  182,  180, 1347,  180,  260,  181,
      182,  180, 1347,  180,  689,  180, 1347,  181,  182,  180,
     1347,  181,  182,  181,  182,  180,  693,  181,  182,  181,
      182,  181,  182,  697,  180,  181,  182,  180,  692, 1347,
     1347,  181,  182, 1347,  695,  694,  696,  698,  180,  699,
      181,  182,  180,  181,  182, 1347,  701,  703,  180, 1347,
      702, 1347,  700,  180,  181,  182,  180, 1347,  181,  182,
      180,  704, 1347,  180,  181,  182,  180,  707,  705,  181,
      182, 1347,  181,  182, 1347, 1347,  181,  182,  706,  181,

      182,  180,  181,  182,  180, 1347, 1347,  709, 1347,  273,
     1347,  712,  711,  708, 1347,  710,  274,  181,  182,  180,
      181,  182,  273, 1347, 1347,  275,  276,  273, 1347,  274,
      273, 1347,  713, 1347,  274,  181,  182,  274,  275,  276,
     1347,  714,  621,  275,  276,  621,  275,  276, 1347, 1347,
      718,  621,  621,  273,  723,  621,  837,  719,  180, 1347,
      274,  273,  720,  621,  273,  621,  721,  722,  274,  275,
      276,  274, 1347, 1347,  181,  182,  273,  275,  276, 1347,
      275,  276, 1347,  274,  840,  180, 1347, 1347, 1347,  724,
     1347,  725,  275,  276,  621,  621,  621, 1347, 1347,  621,

     1347,  181,  182, 1347,  718,  621,  621,  273, 1347,  621,
     1347,  719,  180,  729,  274,  273,  720,  621, 1347,  621,
      721,  722,  274,  275,  276,  272, 1347,  730,  181,  182,
     1347,  275,  276, 1347,  544,  272,  731,  735,  273, 1347,
      732,  733,  728,  734,  273,  274,  273,  844,  621,  621,
      273,  274, 1347,  274,  275,  276, 1347,  274, 1347, 1347,
      275,  276,  275,  276, 1347,  273,  275,  276,  736,  273,
     1347,  739,  274,  273,  737,  740,  274,  273, 1347, 1347,
      274,  275,  276, 1347,  274,  275,  276,  738,  273,  275,
      276,  273, 1347,  275,  276,  274, 1347, 1347,  274,  741,

      742, 1347,  743,  273,  275,  276, 1347,  275,  276, 1347,
      274,  273,  744,  745,  273, 1347,  273, 1347,  274,  275,
      276,  274,  273,  274, 1347,  746,  180,  275,  276,  274,
      275,  276,  275,  276,  273, 1347, 1347,  273,  275,  276,
      750,  274,  181,  182,  274, 1347,  748,  180,  747,  273,
      275,  276,  749,  275,  276,  273,  274, 1347, 1347,  752,
      273,  845,  274,  181,  182,  275,  276,  274,  273, 1347,
      751,  275,  276,  273,  753,  274,  275,  276, 1347,  273,
      274, 1347, 1347,  838,  275,  276,  274, 1347,  755,  275,
      276,  273, 1347, 1347, 1347,  275,  276, 1347,  274,  273,

     1347, 1347,  754, 1347,  757,  273,  274,  275,  276, 1347,
      756, 1347,  274,  273, 1347,  275,  276, 1347,  273,  759,
      274,  275,  276,  760,  273,  274, 1347, 1347,  758,  275,
      276,  274, 1347,  761,  275,  276,  273, 1347, 1347, 1347,
      275,  276, 1347,  274,  330, 1347, 1347,  351,  763,  762,
      351,  331,  275,  276,  352,  764, 1347,  352,  351, 1347,
      332,  333,  351,  353,  354,  352,  353,  354, 1347,  352,
     1347, 1347,  765,  621,  353,  354,  621, 1347,  353,  354,
      786,  769,  621,  621,  351, 1347,  621,  180,  770, 1347,
      785,  352,  790,  771,  621,  351,  621,  772,  773,  351,

      353,  354,  352,  181,  182,  383,  352,  787, 1347, 1347,
     1347,  353,  354, 1347,  383,  353,  354, 1347,  383, 1002,
      788,  383,  351,  839, 1347,  621,  621,  621,  180,  352,
      621, 1347,  789, 1347,  588,  769,  621,  621,  353,  354,
      621, 1347,  770,  180,  181,  182,  351,  771,  621, 1347,
      621,  772,  773,  352, 1347, 1347,  841,  351, 1347,  181,
      182,  351,  353,  354,  352,  791, 1347,  855,  352,  351,
     1347,  792, 1347,  353,  354, 1347,  352,  353,  354,  621,
      621,  621, 1347,  796,  621,  353,  354, 1347, 1347,  780,
      621,  621, 1347, 1347,  621, 1347,  781, 1347, 1347,  793,

      794,  782,  621,  351,  621,  783,  784,  351, 1347,  351,
      352,  351, 1347,  180,  352,  351,  352, 1347,  352,  353,
      354, 1347,  352,  353,  354,  353,  354,  353,  354,  181,
      182,  353,  354,  621,  621,  621, 1347,  799,  621,  850,
      588,  588,  795,  780,  621,  621,  351,  797,  621, 1347,
      781, 1347,  180,  352,  351,  782,  621, 1347,  621,  783,
      784,  352,  353,  354,  798,  351, 1347,  351,  181,  182,
      353,  354,  352,  351,  352, 1347, 1347, 1347,  852, 1347,
      352,  353,  354,  353,  354,  801,  180,  621,  621,  353,
      354,  351,  802,  803,  384, 1347,  800,  384,  352, 1347,

      180,  385,  181,  182,  385, 1347, 1347,  353,  354,  804,
      386,  387,  621,  386,  387,  621,  181,  182, 1347,  819,
      808,  621,  621,  384,  854,  621,  180,  809,  843, 1347,
      385,  384,  810,  621,  384,  621,  811,  812,  385,  386,
      387,  385,  181,  182,  846,  384, 1347,  386,  387, 1347,
      386,  387,  385, 1347, 1347, 1347,  384, 1347, 1347,  813,
      820,  386,  387,  385,  621,  621,  621,  180, 1347,  621,
      396, 1347,  386,  387,  808,  621,  621, 1347,  384,  621,
     1347,  809,  821,  181,  182,  385,  810,  621, 1347,  621,
      811,  812,  384,  822,  386,  387,  823, 1347,  384,  385,

      180, 1347, 1347, 1347,  842,  385,  384, 1347,  386,  387,
     1347, 1347,  824,  385,  386,  387,  181,  182,  621,  621,
      384, 1347,  386,  387, 1347, 1347, 1347,  385,  825,  826,
     1347,  180,  621,  183, 1347,  621,  386,  387,  183, 1347,
      622, 1347,  396,  814, 1347,  180, 1347,  181,  182,  180,
      815, 1347,  816,  849,  828, 1347,  817,  818,  180,  815,
      829,  181,  182,  829, 1347,  181,  182, 1347,  831,  829,
      829,  847,  180,  829,  181,  182,  180,  848, 1347, 1347,
      180,  829,  180,  829,  832,  833,  851,  180,  181,  182,
     1347,  180,  181,  182,  180,  853,  181,  182,  181,  182,

     1347,  856, 1347,  181,  182, 1347, 1347,  181,  182, 1347,
      181,  182,  829,  829,  621,  858,  857,  621,  860, 1347,
      859, 1347,  836,  625,  625,  180, 1347,  625,  861,  863,
      180, 1347,  180, 1347,  180,  625, 1347,  625,  621,  621,
     1347,  181,  182,  862, 1347, 1347,  181,  182,  181,  182,
      181,  182,  180, 1347,  180, 1347, 1347,  865,  180, 1347,
      180,  864,  180, 1347,  180, 1347,  625,  625,  181,  182,
      181,  182,  866,  867,  181,  182,  181,  182,  181,  182,
      181,  182,  180, 1347,  180, 1347,  180,  869,  180,  870,
      868,  180, 1347, 1347, 1347,  180, 1347, 1347,  181,  182,

      181,  182,  181,  182,  181,  182,  180,  181,  182,  180,
      871,  181,  182,  875,  180,  872,  180,  874,  180, 1347,
      873, 1347,  181,  182,  180,  181,  182,  180,  876, 1347,
      181,  182,  181,  182,  181,  182,  180, 1347,  878,  180,
      181,  182,  180,  181,  182,  877, 1347, 1347, 1347,  180,
     1347,  180,  181,  182,  180,  181,  182, 1347,  181,  182,
      180,  881,  880,  882,  879,  181,  182,  181,  182,  180,
      181,  182,  180, 1347,  884,  180,  181,  182, 1347,  180,
     1347, 1347, 1347,  883,  180,  181,  182,  886,  181,  182,
      885,  181,  182,  180, 1347,  181,  182,  180,  887,  888,

      181,  182, 1347,  180,  889,  180, 1347,  180, 1347,  181,
      182,  491,  180,  181,  182,  180, 1347,  180,  890,  181,
      182,  181,  182,  181,  182, 1347,  180, 1347,  181,  182,
     1347,  181,  182,  181,  182, 1347,  180, 1347,  180,  891,
     1347,  892,  181,  182,  180,  893, 1347,  894,  180, 1347,
      180,  895,  181,  182,  181,  182,  898, 1347,  180, 1347,
      181,  182,  180,  896,  181,  182,  181,  182,  180, 1347,
     1347,  180, 1347,  897,  181,  182,  180, 1347,  181,  182,
      900,  899,  180, 1347,  181,  182,  902,  181,  182,  180,
     1347, 1347,  181,  182,  180, 1347, 1347,  180,  181,  182,

     1347, 1347, 1347, 1347,  901,  181,  182,  905,  903,  180,
      181,  182,  180,  181,  182,  180,  906, 1347,  904,  907,
     1347,  621, 1347,  277,  621,  181,  182,  277,  181,  182,
      908,  181,  182,  621,  277,  909,  621,  273, 1347,  277,
     1347,  717, 1347, 1347,  274,  273, 1347, 1347, 1347, 1347,
     1347,  273,  274,  275,  276,  911,  829,  920,  274,  829,
     1347,  275,  276, 1347,  913,  829,  829,  275,  276,  829,
     1347,  914, 1347, 1347, 1347,  273, 1347,  829,  273,  829,
      915,  916,  274,  922, 1347,  274,  273,  921, 1347,  273,
     1347,  275,  276,  274,  275,  276,  274, 1347, 1347, 1347,

      273,  923,  275,  276, 1347,  275,  276,  274,  829,  829,
      621,  180, 1347,  621, 1347,  924,  275,  276,  919,  721,
      721,  925,  273,  721, 1347,  273, 1347,  181,  182,  274,
      544,  721,  274,  721,  621,  621, 1347,  926,  275,  276,
      273,  275,  276, 1347,  273, 1347, 1347,  274,  273, 1347,
      544,  274,  544, 1347, 1347,  274,  275,  276, 1347, 1347,
      275,  276,  721,  721,  275,  276,  273, 1347, 1347,  273,
      544,  273, 1347,  274,  273, 1347,  274,  927,  274,  928,
     1347,  274,  275,  276,  929,  275,  276,  275,  276, 1347,
      275,  276,  273,  930,  273, 1347,  931,  273, 1347,  274,

      273,  274, 1347, 1347,  274,  273, 1347,  274,  275,  276,
      275,  276,  274,  275,  276, 1347,  275,  276, 1347,  273,
     1347,  275,  276,  936,  932,  273,  274,  933, 1347, 1347,
      273, 1347,  274,  273,  934,  275,  276,  274,  935,  180,
      274,  275,  276, 1347,  273, 1347,  275,  276,  937,  275,
      276,  274,  273, 1347, 1347,  181,  182, 1347,  273,  274,
      275,  276,  939,  273, 1347,  274,  938, 1347,  275,  276,
      274,  273, 1347,  940,  275,  276, 1347,  273,  274,  275,
      276, 1347,  273,  941,  274, 1347, 1347,  275,  276,  274,
     1347, 1347, 1347,  275,  276,  273, 1347, 1347,  275,  276,

     1347, 1347,  274,  942,  944, 1347,  273,  943,  273, 1347,
     1347,  275,  276,  274,  273,  274, 1347,  945, 1347,  273,
     1347,  274,  275,  276,  275,  276,  274, 1347, 1347, 1347,
      275,  276,  273, 1347,  273,  275,  276, 1347,  273,  274,
      948,  274,  180,  946,  947,  274,  273, 1347,  275,  276,
      275,  276,  952,  274,  275,  276,  949,  273,  181,  182,
     1347,  950,  275,  276,  274, 1347,  951, 1347, 1022,  621,
      334, 1347,  621,  275,  276,  334, 1347,  768, 1347, 1347,
      351,  953,  621,  355, 1347,  621, 1347,  352,  355, 1347,
      779,  955,  829, 1347, 1347,  829,  353,  354, 1347, 1347,

      957,  829,  829,  351,  965,  829, 1347,  958, 1347, 1347,
      352,  180, 1347,  829,  351,  829,  959,  960,  975,  353,
      354,  352,  351,  974, 1347,  351, 1347,  181,  182,  352,
      353,  354,  352, 1019,  180, 1347,  351, 1347,  353,  354,
      976,  353,  354,  352,  829,  829,  621, 1347, 1347,  621,
      181,  182,  353,  354,  963,  772,  772,  351, 1347,  772,
     1347, 1347,  977,  588,  352,  351, 1347,  772,  588,  772,
      621,  621,  352,  353,  354,  978, 1347,  351, 1347,  351,
     1347,  353,  354, 1347,  352, 1347,  352,  979,  180, 1347,
      351, 1347, 1347,  353,  354,  353,  354,  352,  772,  772,

      829,  980, 1347,  829,  181,  182,  353,  354,  967,  829,
      829,  351, 1347,  829,  982,  968,  180, 1347,  352,  351,
      987,  829,  351,  829,  969,  970,  352,  353,  354,  352,
     1347, 1347,  181,  182,  351,  353,  354,  983,  353,  354,
      984,  352,  180, 1347,  981, 1347, 1347, 1023, 1347,  351,
      353,  354,  829,  829,  621,  985,  352,  621,  181,  182,
     1347, 1020,  973,  783,  783,  353,  354,  783, 1347,  986,
     1347, 1347, 1347,  351, 1347,  783,  351,  783,  621,  621,
      352,  351, 1347,  352,  351, 1347, 1347,  384,  352,  353,
      354,  352,  353,  354,  385,  988, 1347,  353,  354, 1347,

      353,  354, 1347,  386,  387,  384,  783,  783,  621,  388,
      989,  621,  385,  588,  388, 1347,  807, 1347,  990,  384,
     1347,  386,  387, 1001, 1347, 1347,  385, 1347, 1347, 1347,
      992,  829, 1347, 1347,  829,  386,  387, 1347, 1347,  994,
      829,  829, 1347,  384,  829, 1347,  995, 1347, 1347,  815,
      385, 1347,  829, 1347,  829,  996,  997, 1347,  384,  386,
      387, 1347,  384, 1347,  384,  385, 1347, 1347,  815,  385,
     1347,  385, 1347, 1347,  386,  387, 1347, 1347,  386,  387,
      386,  387, 1347,  829,  829,  621, 1006, 1347,  621, 1004,
     1347, 1347, 1347, 1000,  811,  811,  384, 1347,  811,  180,

     1005, 1347, 1347,  385,  384, 1347,  811,  384,  811,  621,
      621,  385,  386,  387,  385,  181,  182, 1347,  384, 1347,
      386,  387, 1347,  386,  387,  385,  180, 1347,  180, 1347,
     1025, 1347,  396, 1347,  386,  387, 1008,  811,  811,  384,
     1347, 1007,  181,  182,  181,  182,  385, 1347, 1017, 1021,
     1009,  621,  183, 1347,  621,  386,  387,  183, 1018,  622,
     1347, 1347,  180,  396,  829,  183, 1347,  829, 1347, 1347,
      183, 1347,  830,  828,  829, 1347, 1347,  829,  181,  182,
     1347, 1347,  831,  829,  829, 1347, 1011,  829,  180,  625,
      625, 1024, 1347,  625, 1347,  829, 1347,  829,  832,  833,

      180,  625,  180,  625,  181,  182, 1026,  621,  619, 1347,
      621, 1347, 1347,  619, 1347,  835,  181,  182,  181,  182,
     1347, 1347, 1347, 1347, 1347, 1347,  829,  829,  829, 1016,
      180,  829,  625,  625, 1347, 1347, 1014,  832,  832, 1027,
      180,  832,  180, 1347,  180, 1347,  181,  182, 1028,  832,
      180,  832,  829,  829, 1347, 1347,  181,  182,  181,  182,
      181,  182, 1030, 1347, 1347, 1347,  181,  182,  180, 1347,
      180, 1029, 1031,  180, 1347, 1347,  180, 1347, 1347, 1347,
      832,  832,  180, 1347,  181,  182,  181,  182, 1347,  181,
      182,  180,  181,  182, 1034,  180, 1033, 1035,  181,  182,

      180, 1347, 1347, 1032, 1036, 1347,  180,  181,  182,  180,
     1347,  181,  182, 1347, 1347,  180,  181,  182, 1039,  180,
     1347, 1038,  181,  182,  180,  181,  182,  180, 1037,  180,
     1040,  181,  182,  180, 1347,  181,  182, 1347, 1347, 1347,
      181,  182,  180,  181,  182,  181,  182,  180, 1347,  181,
      182,  180, 1347, 1041, 1347, 1044,  180, 1347,  181,  182,
     1042, 1347, 1347,  181,  182, 1347, 1347,  181,  182,  180,
     1043,  180,  181,  182, 1347, 1347,  180, 1347, 1046,  180,
     1047,  180, 1045,  180, 1347,  181,  182,  181,  182, 1347,
     1347, 1048,  181,  182,  180,  181,  182,  181,  182,  181,

      182, 1052,  180, 1347,  180, 1049, 1050, 1347, 1051, 1347,
      181,  182,  180, 1347,  180, 1347, 1347,  180,  181,  182,
      181,  182,  180, 1347, 1054, 1053, 1055,  180,  181,  182,
      181,  182,  180,  181,  182, 1347,  180, 1347,  181,  182,
      180, 1056, 1058,  181,  182,  180, 1347,  180,  181,  182,
      180, 1057,  181,  182, 1060, 1347,  181,  182,  180, 1059,
     1061,  181,  182,  181,  182,  180,  181,  182, 1347, 1347,
     1347, 1062,  180, 1347,  181,  182,  180, 1347,  180, 1347,
     1347,  181,  182, 1347, 1064,  180, 1063,  180,  181,  182,
      180, 1347,  181,  182,  181,  182, 1066,  180, 1347, 1347,

     1065,  181,  182,  181,  182,  180,  181,  182,  180, 1347,
      180, 1347,  180,  181,  182, 1347, 1067, 1347,  180, 1347,
     1347,  181,  182, 1068,  181,  182,  181,  182,  181,  182,
      621,  277, 1069,  621,  181,  182,  277, 1071,  717, 1347,
     1347,  273, 1347,  829,  277, 1070,  829, 1347,  274,  277,
     1347,  912,  911,  829, 1347,  180,  829,  275,  276, 1347,
     1347,  913,  829,  829, 1347, 1073,  829, 1079,  914,  721,
      721,  181,  182,  721,  829, 1347,  829,  915,  916,  621,
      715,  721,  621,  721, 1154,  715,  273,  918,  621, 1347,
      334,  621,  273,  274,  334, 1347, 1347, 1347, 1347,  274,

     1347, 1078,  275,  276, 1347,  829,  829,  829,  275,  276,
      829, 1347,  721,  721, 1347, 1076,  915,  915,  273, 1347,
      915,  621, 1347,  355,  621,  274, 1347,  355,  915, 1080,
      915,  829,  829,  273,  275,  276,  273, 1347,  273, 1347,
      274,  273, 1081,  274, 1347,  274, 1347, 1347,  274,  275,
      276, 1347,  275,  276,  275,  276, 1347,  275,  276,  915,
      915,  621, 1347,  544,  621, 1347,  544, 1347, 1082,  718,
      621,  621,  273, 1347,  621, 1347,  719, 1347, 1347,  274,
      273, 1347,  621,  273,  621,  721,  722,  274,  275,  276,
      274,  273, 1347, 1083,  273, 1347,  275,  276,  274,  275,

      276,  274, 1347,  621, 1347,  388,  621,  275,  276,  388,
      275,  276,  273,  621,  621, 1347,  273, 1084, 1086,  274,
      273, 1347, 1085,  274, 1347, 1347, 1087,  274,  275,  276,
     1347,  273,  275,  276, 1347, 1347,  275,  276,  274,  273,
     1347, 1090, 1089,  273, 1088,  273,  274,  275,  276, 1347,
      274, 1347,  274, 1347, 1347,  275,  276,  273, 1347,  275,
      276,  275,  276,  273,  274,  273, 1347, 1347, 1091, 1092,
      274,  273,  274,  275,  276, 1093, 1347,  273,  274,  275,
      276,  275,  276, 1347,  274,  273, 1347,  275,  276, 1347,
     1347, 1347,  274,  275,  276, 1347, 1347, 1095, 1097,  273,

     1094,  275,  276, 1096,  273, 1098,  274,  273, 1347, 1347,
      273,  274,  273, 1347,  274,  275,  276,  274, 1347,  274,
      275,  276, 1347,  275,  276, 1099,  275,  276,  275,  276,
     1102,  273, 1100,  273, 1347,  273, 1347, 1347,  274, 1347,
      274, 1347,  274, 1347, 1347, 1347, 1101,  275,  276,  275,
      276,  275,  276,  621,  334, 1347,  621,  351, 1104,  334,
     1347,  768, 1347, 1347,  352, 1347, 1103, 1347,  772,  772,
     1347, 1347,  772,  353,  354,  955,  829, 1347, 1347,  829,
      772, 1347,  772, 1119,  957,  829,  829,  829,  334,  829,
      829,  958, 1347,  334, 1347,  956, 1347,  829, 1347,  829,

      959,  960,  621,  766, 1347,  621, 1347, 1347,  766, 1106,
      962,  772,  772,  621,  355,  180,  621, 1347, 1347,  355,
     1347,  779,  783,  783, 1111, 1347,  783, 1347,  829,  829,
      829,  181,  182,  829,  783,  965,  783, 1347, 1109,  959,
      959,  829,  355,  959,  829, 1347, 1347,  355, 1347,  966,
     1147,  959, 1347,  959,  829,  829,  621,  777, 1347,  621,
     1347, 1347,  777, 1113,  972,  783,  783, 1347, 1347,  351,
     1347, 1347,  351, 1347,  351, 1347,  352, 1347, 1118,  352,
     1347,  352,  959,  959,  621,  353,  354,  621,  353,  354,
      353,  354,  769,  621,  621,  351, 1121,  621, 1347,  770,

     1124, 1347,  352,  351, 1347,  621, 1120,  621,  772,  773,
      352,  353,  354, 1347, 1347,  351, 1347, 1347,  351,  353,
      354, 1347,  352, 1347, 1347,  352,  351, 1347,  180, 1347,
     1122,  353,  354,  352,  353,  354,  621,  621,  829,  180,
      588,  829,  353,  354,  181,  182,  967,  829,  829,  588,
      588,  829, 1347,  968, 1347,  181,  182,  351, 1123,  829,
      351,  829,  969,  970,  352,  351, 1149,  352, 1347,  180,
     1347,  351,  352,  353,  354, 1148,  353,  354,  352, 1347,
      180,  353,  354, 1127, 1126,  181,  182,  353,  354, 1159,
      829,  829,  829, 1347, 1125,  829,  181,  182, 1347, 1347,

      967,  829,  829,  351, 1347,  829, 1347,  968,  588, 1347,
      352,  351, 1150,  829,  351,  829,  969,  970,  352,  353,
      354,  352,  351, 1347, 1347, 1347,  384,  353,  354,  352,
      353,  354, 1129,  385,  384, 1128, 1131, 1347,  353,  354,
     1130,  385,  386,  387,  829,  829,  829, 1347, 1139,  829,
      386,  387, 1143, 1347, 1116,  969,  969,  621,  388,  969,
      621, 1347, 1347,  388, 1347,  807, 1347,  969, 1347,  969,
      829,  829,  829,  388, 1347,  829, 1347, 1347,  388,  992,
      993, 1347, 1347,  811,  811,  621,  805,  811,  621,  384,
     1347,  805, 1347,  999, 1133,  811,  385,  811,  969,  969,

      621,  180, 1347,  621, 1347,  386,  387, 1138,  780,  621,
      621, 1347,  384,  621,  815,  781, 1347,  181,  182,  385,
     1347,  621,  438,  621,  783,  784,  811,  811,  386,  387,
      829, 1347,  183,  829,  384, 1347,  183,  815, 1347,  829,
      183,  385,  829,  180, 1347,  183, 1347,  830, 1347,  384,
      386,  387,  621,  621,  829, 1140,  385,  829, 1347,  181,
      182, 1011,  994,  829,  829,  386,  387,  829, 1347,  995,
     1141, 1347, 1347,  384, 1151,  829, 1347,  829,  996,  997,
      385, 1347, 1347, 1347,  384, 1347, 1347,  384, 1347,  386,
      387,  385, 1347, 1142,  385, 1347, 1347,  180,  832,  832,

      386,  387,  832,  386,  387, 1347,  829,  829,  829, 1347,
      832,  829,  832,  181,  182, 1347,  994,  829,  829, 1152,
      396,  829, 1144,  995,  621, 1347,  619,  621, 1347,  829,
      619,  829,  996,  997,  180, 1347, 1347,  829,  619, 1347,
      829,  832,  832,  619, 1347, 1013,  621,  619, 1347,  621,
      181,  182,  619, 1347,  835, 1347, 1153,  180, 1347, 1146,
      829,  829,  829,  180, 1347,  829, 1347, 1347, 1016, 1347,
     1136,  996,  996,  181,  182,  996,  180, 1347,  180,  181,
      182, 1347,  180,  996, 1347,  996,  829,  829, 1156, 1155,
      180, 1347,  181,  182,  181,  182,  180, 1347,  181,  182,

     1158, 1347, 1160, 1347, 1347,  180,  181,  182, 1347, 1347,
     1347, 1347,  181,  182,  996,  996,  621,  180, 1162,  621,
     1157,  181,  182, 1347,  808,  621,  621, 1161,  180,  621,
      180,  809, 1347,  181,  182, 1347,  180,  621,  180,  621,
      811,  812, 1347, 1347,  181,  182,  181,  182, 1163,  180,
     1347, 1347,  181,  182,  181,  182, 1347, 1347,  180, 1347,
     1166, 1347, 1347, 1347, 1347,  181,  182, 1164,  621,  621,
      829, 1165, 1347,  829,  181,  182, 1347, 1347,  831,  829,
      829,  180, 1347,  829,  180, 1347,  180, 1347,  180, 1167,
      180,  829,  180,  829,  832,  833,  180,  181,  182, 1347,

      181,  182,  181,  182,  181,  182,  181,  182,  181,  182,
     1169,  180,  181,  182, 1347,  180, 1170,  180, 1347, 1347,
     1168, 1347,  829,  829,  180, 1347, 1347,  181,  182,  180,
     1347,  181,  182,  181,  182,  180, 1171, 1172, 1347,  180,
      181,  182, 1174,  180, 1347,  181,  182,  180, 1347, 1347,
      180,  181,  182,  180, 1173,  181,  182,  180, 1347,  181,
      182,  180, 1347,  181,  182, 1175,  181,  182,  180,  181,
      182, 1176,  180,  181,  182,  180, 1347,  181,  182, 1177,
      180, 1347, 1347,  180,  181,  182,  180, 1347,  181,  182,
      180,  181,  182, 1347,  180, 1347,  181,  182, 1178,  181,

      182, 1347,  181,  182, 1347,  180,  181,  182, 1182, 1179,
      181,  182,  829, 1347,  277,  829, 1347, 1180,  277, 1347,
     1181,  181,  182, 1347, 1347, 1183,  180,  829,  277, 1184,
      829, 1347, 1347,  277, 1347,  912,  915,  915,  829,  715,
      915,  829,  181,  182,  715, 1347, 1075, 1347,  915, 1073,
      915,  621,  715, 1347,  621,  180, 1347,  715,  273,  918,
     1186,  621, 1347,  715,  621,  274, 1347,  715, 1347, 1347,
      273,  181,  182, 1078,  275,  276, 1187,  274,  273,  915,
      915, 1347,  273, 1347,  273,  274,  275,  276, 1188,  274,
      273,  274, 1231, 1347,  275,  276,  273,  274,  275,  276,

      275,  276,  273,  274, 1347, 1347,  275,  276,  273,  274,
     1191, 1347,  275,  276,  273,  274, 1189, 1347,  275,  276,
     1190,  274,  273, 1347,  275,  276,  273, 1347,  273,  274,
      275,  276, 1347,  274, 1347,  274, 1192, 1347,  275,  276,
      273, 1347,  275,  276,  275,  276, 1347,  274,  273, 1347,
     1196, 1193, 1195,  273, 1347,  274,  275,  276, 1347, 1194,
      274,  273, 1197,  180,  275,  276,  273, 1347,  274,  275,
      276, 1347, 1347,  274,  273, 1347, 1347,  275,  276,  181,
      182,  274,  275,  276, 1347, 1198,  273, 1347,  273, 1199,
      275,  276,  273,  274, 1347,  274, 1201, 1347, 1347,  274,

     1347, 1200,  275,  276,  275,  276, 1347, 1347,  275,  276,
     1347,  273, 1347,  273, 1347,  273, 1204, 1203,  274,  273,
      274, 1347,  274, 1202, 1347,  180,  274,  275,  276,  275,
      276,  275,  276, 1347, 1347,  275,  276,  829,  334, 1347,
      829,  181,  182,  334, 1347,  956, 1347, 1347, 1347, 1205,
     1347, 1207, 1206, 1347,  829, 1347,  334,  829, 1347, 1106,
      334,  959,  959,  829,  766,  959,  829, 1347, 1347,  766,
     1347, 1108, 1347,  959,  351,  959,  621,  766, 1347,  621,
     1347,  352,  766, 1347,  962, 1209,  621, 1347,  766,  621,
      353,  354,  766,  829,  355, 1347,  829, 1347, 1111,  355,

     1347,  966, 1347,  588,  959,  959,  829, 1347,  355,  829,
      969,  969,  355, 1347,  969, 1113, 1347,  829,  777, 1347,
      829, 1347,  969,  777,  969, 1115,  621,  777, 1347,  621,
      180, 1347,  777,  351,  972,  621, 1347,  777,  621, 1211,
      352,  777, 1347, 1347, 1347,  351,  181,  182, 1118,  353,
      354, 1212,  352,  969,  969, 1347, 1347,  351, 1347,  351,
     1347,  353,  354, 1213,  352,  351,  352, 1236,  180, 1347,
      351, 1347,  352,  353,  354,  353,  354,  352, 1347, 1347,
     1347,  353,  354,  351,  181,  182,  353,  354, 1347, 1347,
      352, 1347, 1347, 1347,  351, 1214,  351, 1215, 1347,  353,

      354,  352, 1216,  352, 1347, 1218, 1347, 1217,  351, 1347,
      353,  354,  353,  354,  351,  352,  588,  829, 1347,  388,
      829,  352,  351,  388,  353,  354, 1347, 1347,  180,  352,
      353,  354, 1347, 1219,  829,  388, 1221,  829,  353,  354,
      388, 1347,  993, 1220,  181,  182, 1222,  996,  996,  829,
      805,  996,  829, 1347, 1347,  805, 1133, 1135, 1347,  996,
      384,  996,  621,  805, 1347,  621,  180,  385,  805, 1347,
      999, 1224,  621, 1347,  805,  621,  386,  387,  805, 1347,
     1347,  384,  181,  182, 1138,  384, 1347,  384,  385, 1347,
      996,  996,  385,  384,  385, 1347,  396,  386,  387,  384,

      385,  386,  387,  386,  387,  180,  385, 1225, 1347,  386,
      387, 1226, 1347, 1347, 1347,  386,  387,  829,  619, 1347,
      829,  181,  182,  619, 1227, 1013,  180, 1347, 1347, 1228,
      180,  829, 1347,  619,  829, 1347, 1229,  619,  180, 1146,
      180, 1347,  181,  182,  180, 1232,  181,  182, 1347, 1347,
     1347, 1347, 1230, 1347,  181,  182,  181,  182,  180, 1347,
      181,  182,  180, 1347,  180, 1233, 1237,  180, 1017, 1234,
     1347,  180, 1235, 1347,  181,  182, 1347, 1347,  181,  182,
      181,  182, 1347,  181,  182,  180, 1240,  181,  182, 1241,
      180, 1347,  180, 1242, 1347, 1238,  180, 1347,  180, 1239,

      180,  181,  182, 1347, 1347, 1347,  181,  182,  181,  182,
      180, 1244,  181,  182,  181,  182,  181,  182,  180, 1347,
     1243,  180, 1246,  180, 1347, 1347,  181,  182,  180, 1347,
      180, 1347,  180, 1347,  181,  182,  180,  181,  182,  181,
      182, 1245,  180, 1347,  181,  182,  181,  182,  181,  182,
     1247,  180,  181,  182, 1249,  180, 1347, 1347,  181,  182,
      180, 1347,  180, 1248, 1347, 1347, 1347,  181,  182, 1347,
     1347,  181,  182,  180, 1250, 1347,  181,  182,  181,  182,
      829,  715, 1347,  829, 1347, 1347,  715, 1251, 1075,  181,
      182, 1347, 1252,  273, 1253,  829, 1347,  715,  829,  273,

      274,  715, 1186, 1347,  273, 1347,  274,  273, 1347,  275,
      276,  274,  273, 1347,  274,  275,  276, 1347,  273,  274,
      275,  276, 1347,  275,  276,  274, 1347, 1257,  275,  276,
     1254,  273, 1347,  273,  275,  276, 1255, 1347,  274, 1256,
      274, 1347, 1347, 1258, 1347,  273, 1347,  275,  276,  275,
      276,  273,  274, 1259, 1347, 1347, 1347,  273,  274, 1347,
     1347,  275,  276,  273,  274, 1347, 1347,  275,  276, 1347,
      274,  273, 1262,  275,  276, 1260, 1261,  273,  274,  275,
      276, 1263,  273, 1347,  274,  273, 1347,  275,  276,  274,
      273, 1347,  274,  275,  276, 1347, 1347,  274,  275,  276,

     1347,  275,  276, 1347, 1347,  273,  275,  276,  273, 1347,
     1264, 1266,  274, 1265, 1347,  274,  273, 1347, 1347,  273,
     1347,  275,  276,  274,  275,  276,  274, 1347,  829, 1347,
      766,  829,  275,  276,  766,  275,  276,  829,  766, 1347,
      829, 1347, 1347,  766, 1268, 1108, 1347, 1267, 1347, 1347,
     1347, 1270, 1269, 1347,  829,  777, 1347,  829, 1347, 1209,
      777,  351, 1115,  829, 1347,  777,  829,  351,  352,  777,
     1347, 1347,  351, 1347,  352,  351, 1211,  353,  354,  352,
      351, 1347,  352,  353,  354, 1347, 1347,  352,  353,  354,
     1347,  353,  354,  351, 1347, 1274,  353,  354, 1271,  351,

      352,  351, 1275, 1347, 1272,  351,  352, 1273,  352,  353,
      354, 1347,  352, 1347, 1347,  353,  354,  353,  354,  588,
      588,  353,  354,  351, 1347,  351, 1347, 1347,  829,  805,
      352,  829,  352, 1347,  805, 1276, 1135, 1347, 1277,  353,
      354,  353,  354,  829, 1347,  805,  829, 1347,  384,  805,
     1224, 1347,  384, 1347, 1278,  385,  384, 1347, 1347,  385,
     1347, 1347, 1347,  385,  386,  387, 1347,  588,  386,  387,
      384, 1347,  386,  387,  384, 1347,  180,  385,  180, 1279,
      180,  385, 1281, 1280, 1347,  180,  386,  387,  180, 1347,
      386,  387,  181,  182,  181,  182,  181,  182, 1283,  180,

     1284,  181,  182, 1347,  181,  182, 1282,  180, 1347,  180,
      396, 1285,  180, 1347,  180,  181,  182, 1347, 1347, 1287,
      180, 1347, 1286,  181,  182,  181,  182,  180,  181,  182,
      181,  182,  180, 1347, 1289, 1288,  181,  182,  180, 1347,
     1347, 1290,  180,  181,  182,  180, 1347, 1347,  181,  182,
     1347, 1347,  180, 1347,  181,  182, 1292,  180,  181,  182,
     1347,  181,  182,  180, 1291,  180, 1347, 1293,  181,  182,
      180, 1347,  180,  181,  182,  180, 1347, 1295, 1294,  181,
      182,  181,  182,  273, 1347, 1347,  181,  182,  181,  182,
      274,  181,  182, 1347,  273, 1347, 1347, 1347, 1347,  275,

      276,  274, 1296, 1347, 1347, 1347,  273, 1347, 1347, 1299,
      275,  276, 1297,  274,  273, 1298, 1347, 1347,  273, 1347,
     1300,  274,  275,  276, 1301,  274, 1347, 1347, 1347,  273,
      275,  276, 1347,  273,  275,  276,  274,  273, 1347, 1347,
      274,  273,  953,  540,  274,  275,  276,  180,  274,  275,
      276, 1302,  273,  275,  276,  273, 1347,  275,  276,  274,
     1303,  953,  274,  181,  182, 1347,  273, 1347,  275,  276,
     1347,  275,  276,  274,  273, 1347, 1347,  273, 1347, 1347,
     1304,  274,  275,  276,  274,  273, 1305, 1347, 1347, 1347,
      275,  276,  274,  275,  276, 1347,  273, 1347, 1347,  273,

     1347,  275,  276,  274,  351, 1306,  274, 1307, 1347, 1347,
     1347,  352,  275,  276, 1347,  275,  276,  351, 1347,  351,
      353,  354,  351, 1347,  352,  351,  352, 1308, 1347,  352,
     1309, 1347,  352,  353,  354,  353,  354, 1311,  353,  354,
     1347,  353,  354, 1310,  351, 1347,  351, 1347,  351, 1347,
      384,  352, 1347,  352,  588,  352, 1313,  385, 1347, 1312,
      353,  354,  353,  354,  353,  354,  386,  387, 1315,  384,
     1347, 1314,  384, 1347,  396,  384,  385, 1347,  180,  385,
     1347, 1347,  385,  180, 1347,  386,  387, 1347,  386,  387,
      180,  386,  387,  396,  181,  182,  180, 1317, 1347,  181,

      182,  180, 1347, 1316,  180, 1347,  181,  182,  180, 1347,
     1347,  180,  181,  182, 1017,  180, 1347,  181,  182,  180,
      181,  182,  180, 1347,  181,  182,  868,  181,  182, 1347,
     1347,  181,  182,  180, 1347,  181,  182,  180,  181,  182,
      180, 1347, 1347,  180, 1320,  273, 1319, 1347,  273,  181,
      182, 1318,  274,  181,  182,  274,  181,  182, 1321,  181,
      182,  275,  276, 1322,  275,  276,  273, 1347, 1347,  273,
     1347, 1347,  273,  274,  273, 1347,  274,  180, 1347,  274,
     1347,  274,  275,  276, 1323,  275,  276, 1324,  275,  276,
      275,  276, 1347,  181,  182,  273, 1347,  273, 1347,  273,

     1328, 1326,  274, 1325,  274, 1347,  274, 1347, 1347, 1327,
     1347,  275,  276,  275,  276,  275,  276, 1329, 1347, 1347,
      273,  953,  351, 1347,  351, 1347, 1347,  274,  180,  352,
      180,  352, 1347, 1347, 1347, 1330,  275,  276,  353,  354,
      353,  354,  351, 1347,  181,  182,  181,  182,  351,  352,
      351, 1347, 1347,  384, 1347,  352, 1347,  352,  353,  354,
      385, 1331, 1337, 1332,  353,  354,  353,  354,  351,  386,
      387, 1347,  180, 1347,  351,  352,  384,  396, 1347, 1333,
     1334,  352,  180,  385,  353,  354,  180,  588,  181,  182,
      353,  354,  386,  387, 1335, 1347,  588,  273,  181,  182,

      273, 1347,  181,  182,  274, 1347, 1347,  274,  273, 1336,
     1347, 1347,  396,  275,  276,  274,  275,  276, 1049, 1338,
      273, 1347, 1339,  273,  275,  276,  273,  274,  273, 1347,
      274,  273, 1347,  274, 1340,  274,  275,  276,  274,  275,
      276, 1347,  275,  276,  275,  276, 1341,  275,  276,  351,
     1347,  351, 1347,  351, 1347,  728,  352, 1347,  352, 1347,
      352, 1347, 1347, 1347, 1347,  353,  354,  353,  354,  353,
      354,  588,  180,  588,  351, 1347,  351, 1347,  273, 1342,
     1347,  352, 1347,  352, 1347,  274, 1347, 1347,  181,  182,
      353,  354,  353,  354,  275,  276,  588,  273, 1347,  273,

     1347,  273, 1347, 1343,  274,  351,  274,  180,  274,  588,
     1347, 1347,  352,  275,  276,  275,  276,  275,  276,  273,
     1347,  353,  354,  181,  182,  351,  274,  273, 1347, 1347,
     1347, 1344,  352, 1347,  274,  275,  276, 1345, 1347, 1347,
     1347,  353,  354,  275,  276, 1347, 1347, 1347, 1347, 1347,
     1346, 1347, 1347, 1347, 1347, 1347,  588,  101,  101,  101,
      101,  101,  101,  101,  101,  101,  101,  101,  159,  159,
      159,  159,  159,  159,  159,  159,  159,  159,  159,  164,
      164,  164,  164,  164,  164,  164,  164,  164,  164,  164,
      167,  167,  167,  167,  167,  167,  167,  167,  167,  167,

      167,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  179,  179, 1347, 1347,  179,  179,  179,  183,
     1347,  183,  183,  183,  183,  183,  183,  183,  183,  272,
      272, 1347, 1347,  272,  272,  272,  277, 1347,  277,  277,
      277,  277,  277,  277,  277,  277,  329,  329, 1347, 1347,
      329,  329,  329,  334, 1347,  334,  334,  334,  334,  334,
      334,  334,  334,  350,  350, 1347, 1347,  350,  350,  350,
      355, 1347,  355,  355,  355,  355,  355,  355,  355,  355,
      383,  383, 1347, 1347,  383,  383,  383,  388, 1347,  388,
      388,  388,  388,  388,  388,  388,  388,  416, 1347, 1347,

     1347,  416, 1347,  416,  416, 1347,  416,  416,  420, 1347,
     1347,  420,  420, 1347,  420,  420,  420,  420,  420,  421,
      421, 1347,  421,  421,  421,  421,  421,  421,  421,  421,
      422, 1347,  422,  422, 1347, 1347,  422, 1347,  422,  424,
      424,  424,  424,  424, 1347,  424,  521,  521,  521,  521,
      521, 1347,  521,  566,  566,  566,  566,  566, 1347,  566,
      576,  576,  576,  576,  576, 1347,  576,  602,  602,  602,
      602,  602, 1347,  602,  619, 1347,  619,  619,  619,  619,
      619,  619,  619,  619,  622, 1347, 1347, 1347,  622,  622,
      622,  622,  622,  622,  622,  715, 1347,  715,  715,  715,

      715,  715,  715,  715,  715,  717, 1347, 1347, 1347,  717,
      717,  717,  717,  717,  717,  717,  766, 1347,  766,  766,
      766,  766,  766,  766,  766,  766,  768, 1347, 1347, 1347,
      768,  768,  768,  768,  768,  768,  768,  621, 1347, 1347,
     1347,  621,  621,  621,  621,  621,  621,  621,  777, 1347,
      777,  777,  777,  777,  777,  777,  777,  777,  779, 1347,
     1347, 1347,  779,  779,  779,  779,  779,  779,  779,  805,
     1347,  805,  805,  805,  805,  805,  805,  805,  805,  807,
     1347, 1347, 1347,  807,  807,  807,  807,  807,  807,  807,
      827,  827, 1347,  827,  827,  827,  827,  827,  827,  827,

      827,  830, 1347, 1347, 1347,  830,  830,  830,  830,  830,
      830,  830,  835, 1347, 1347, 1347,  835,  835,  835,  835,
      835,  835,  835,  910,  910, 1347,  910,  910,  910,  910,
      910,  910,  910,  910,  912, 1347, 1347, 1347,  912,  912,
      912,  912,  912,  912,  912,  918, 1347, 1347, 1347,  918,
      918,  918,  918,  918,  918,  918,  954,  954, 1347,  954,
      954,  954,  954,  954,  954,  954,  954,  956, 1347, 1347,
     1347,  956,  956,  956,  956,  956,  956,  956,  962, 1347,
     1347, 1347,  962,  962,  962,  962,  962,  962,  962,  829,
     1347, 1347, 1347,  829,  829,  829,  829,  829,  829,  829,

      964,  964, 1347,  964,  964,  964,  964,  964,  964,  964,
      964,  966, 1347, 1347, 1347,  966,  966,  966,  966,  966,
      966,  966,  972, 1347, 1347, 1347,  972,  972,  972,  972,
      972,  972,  972,  991,  991, 1347,  991,  991,  991,  991,
      991,  991,  991,  991,  993, 1347, 1347, 1347,  993,  993,
      993,  993,  993,  993,  993,  999, 1347, 1347, 1347,  999,
      999,  999,  999,  999,  999,  999, 1010, 1010, 1347, 1010,
     1010, 1010, 1010, 1010, 1010, 1010, 1010, 1013, 1347, 1347,
     1347, 1013, 1013, 1013, 1013, 1013, 1013, 1013, 1015, 1015,
     1347, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1015, 1072,

     1072, 1347, 1072, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1075, 1347, 1347, 1347, 1075, 1075, 1075, 1075, 1075, 1075,
     1075,  717, 1347, 1347, 1347,  717,  717,  717,  717,  717,
      717,  717, 1077, 1077, 1347, 1077, 1077, 1077, 1077, 1077,
     1077, 1077, 1077,  272,  272, 1347, 1347,  272,  272,  272,
     1105, 1105, 1347, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1108, 1347, 1347, 1347, 1108, 1108, 1108, 1108, 1108,
     1108, 1108,  768, 1347, 1347, 1347,  768,  768,  768,  768,
      768,  768,  768, 1110, 1110, 1347, 1110, 1110, 1110, 1110,
     1110, 1110, 1110, 1110,  964,  964, 1347,  964,  964,  964,

      964,  964,  964,  964,  964,  966, 1347, 1347, 1347,  966,
      966,  966,  966,  966,  966,  966, 1112, 1112, 1347, 1112,
     1112, 1112, 1112, 1112, 1112, 1112, 1112, 1115, 1347, 1347,
     1347, 1115, 1115, 1115, 1115, 1115, 1115, 1115,  779, 1347,
     1347, 1347,  779,  779,  779,  779,  779,  779,  779, 1117,
     1117, 1347, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117,
      350,  350, 1347, 1347,  350,  350,  350,  991,  991, 1347,
      991,  991,  991,  991,  991,  991,  991,  991,  993, 1347,
     1347, 1347,  993,  993,  993,  993,  993,  993,  993, 1132,
     1132, 1347, 1132, 1132, 1132, 1132, 1132, 1132, 1132, 1132,

     1135, 1347, 1347, 1347, 1135, 1135, 1135, 1135, 1135, 1135,
     1135,  807, 1347, 1347, 1347,  807,  807,  807,  807,  807,
      807,  807, 1137, 1137, 1347, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1137,  383,  383, 1347, 1347,  383,  383,  383,
     1010, 1010, 1347, 1010, 1010, 1010, 1010, 1010, 1010, 1010,
     1010,  829, 1347, 1347, 1347,  829,  829,  829,  829,  829,
      829,  829,  830, 1347, 1347, 1347,  830,  830,  830,  830,
      830,  830,  830, 1145, 1145, 1347, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1015, 1015, 1347, 1015, 1015, 1015,
     1015, 1015, 1015, 1015, 1015,  179,  179, 1347, 1347,  179,

      179,  179, 1185, 1185, 1347, 1185, 1185, 1185, 1185, 1185,
     1185, 1185, 1185, 1208, 1208, 1347, 1208, 1208, 1208, 1208,
     1208, 1208, 1208, 1208, 1210, 1210, 1347, 1210, 1210, 1210,
     1210, 1210, 1210, 1210, 1210, 1223, 1223, 1347, 1223, 1223,
     1223, 1223, 1223, 1223, 1223, 1223,   23, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1347, 1347, 1347
    } ;

static const flex_int16_t yy_chk[8904] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  996,   15,   15,   28,   15,   15,
       15,  969,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  959,   90,   28,   28,   13,   15,   13,  915,   29,
      835,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  832,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  809,   36,  625,   33,   33,   37,  109,  625,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  184,  184,  807,   39,
       39,  781,   39,   38,   39,   38,  278,  278,  779,   40,
       21,   21,   39,   21,   22,  179,   22,   22,   22,   22,
       39,   42,   22,   22,   22,   40,   40,  775,  180,   45,
      774,  179,  179,  770,   38,   38,   22,   42,   42,   43,
      183,   40,  180,   42,   40,   45,   45,   40,  768,   45,
      719,   45,  717,   42,  183,   43,   43,   42,  721,   42,
      163,   46,  163,  721,   45,  181,   22,   22,   47,   22,
       41,   43,   48,   43,   43,  622,  163,   46,   46,  618,
       43,  181,  181,  617,   47,   47,   41,   41,   48,   48,

       48,   41,   46,  194,   47,   41,   46,  175,  175,   41,
       41,   48,   41,   44,   48,   41,   49,   44,   48,  194,
      194,   44,   44,   50,   44,  194,  575,   44,  574,   44,
      273,   44,   49,   49,   49,   49,  573,   51,   49,   50,
       50,   50,   49,  572,  273,   50,   52,  772,   49,   53,
      175,  175,  772,   51,   51,   50,   51,   56,  571,  189,
       51,   50,   52,   52,   52,   53,   53,   51,   51,  570,
       51,  277,   54,   56,   56,  189,  189,  415,   52,   56,
       58,   52,   56,   56,   52,  277,   52,   53,   54,   54,
       54,  189,   56,  414,   54,  330,   58,   58,   58,  349,

       57,   54,   58,  335,  335,  348,   58,   59,  347,  330,
       54,   55,   55,   60,  346,   55,   57,   57,   58,   55,
       55,  334,   55,   59,   59,   55,  351,   55,   55,   60,
       60,   57,   59,   59,   61,  334,  107,   60,  106,   64,
      351,   61,   64,   60,   23,   65,   64,   66,  356,  356,
       61,   61,   65,   66,   66,   64,   64,    0,   67,   66,
       68,   65,   65,   66,   66,   67,   69,   68,   67,   67,
        0,   71,   68,   69,   67,   67,   68,   68,   71,   73,
       70,   70,   69,   69,   70,    0,   73,   71,   71,  389,
      389,    0,   70,   76,   70,   73,   73,   74,  355,   86,

       76,   75,    0,  192,   74,   73,   86,   71,   75,   76,
       76,   76,  355,   74,   74,   86,   86,   75,   75,  192,
      192,  620,  620,   70,   70,   72,    0,   78,   74,  716,
      716,   74,   72,   75,   78,   86,   75,  384,   74,  388,
      192,   72,   72,   78,   78,    0,   78,   72,    0,   79,
      425,  384,  186,  388,   72,   72,   79,   72,  186,   72,
       72,   72,   72,   77,  425,   79,   79,   79,  186,  186,
       77,   79,  185,  522,   80,  185,  767,  767,    0,   77,
       77,   80,    0,  567,   77,   81,   77,  522,  185,  185,
       80,   80,   81,   80,   77,    0,   80,  567,   82,   77,

       77,   81,   81,  577,   81,   82,   83,  778,  778,   84,
       80,   84,    0,   83,   82,   82,    0,  577,   81,   84,
       84,   84,   83,   83,   84,   84,   84,   85,  603,   87,
       82,    0,   83,   82,   85,   83,   87,  619,  715,  806,
      806,   88,  603,   85,   85,   87,   87,   87,   88,   85,
      783,  619,  715,   88,   89,  783,  187,   88,   88,   85,
       92,   89,   93,   92,  187,  187,    0,   92,   93,   93,
       89,   89,  187,  187,  195,    0,   92,   92,   93,   93,
       94,   94,   94,   94,   94,   94,    0,   94,  811,   95,
      195,  195,   96,  811,   94,   97,   95,   95,   95,   96,

      195,    0,   97,   94,   94,   95,   95,  193,   96,   96,
        0,   97,   97,   98,   98,   99,  766,   98,    0,    0,
        0,    0,   99,  193,  193,   98,  108,   98,  193,    0,
      766,   99,   99,  108,  102,  102,  102,  102,  102,  102,
      777,  805,  108,  108,  102,    0,   99,  102,  104,  104,
      104,  104,  104,  104,  777,  805,   98,   98,  104,    0,
        0,  104,  105,  105,  105,  105,  105,  105,    0,    0,
      112,    0,  105,  112,  114,  105,  115,  112,  116,    0,
      114,  114,    0,  115,  196,  116,  112,  112,    0,  116,
      114,  114,  115,  115,  116,  116,  117,    0,  120,    0,

      196,  196,    0,  117,    0,  120,  121,  121,  117,  122,
      121,    0,  117,  117,  120,  120,  122,  124,  121,    0,
      121,  123,    0,  126,  124,  122,  122,    0,  123,    0,
      126,    0,    0,  124,  124,  125,    0,  123,  123,  126,
      126,  126,  125,  124,  190,  122,    0,    0,  127,  121,
      121,  125,  125,  123,    0,  127,  128,    0,  123,  129,
      190,  190,    0,  128,  127,  127,  129,  125,    0,  127,
      125,  127,  128,  128,  128,  129,  129,  130,  128,    0,
        0,  129,  131,  190,  130,  127,    0,    0,    0,  131,
      132,    0,    0,  130,  130,  129,  130,  132,  131,  131,

        0,    0,  133,    0,  134,    0,  132,  132,  137,  133,
        0,  134,    0,    0,  131,  137,  132,  131,  133,  133,
      134,  134,    0,    0,  137,  137,  139,    0,    0,  139,
        0,  140,    0,  139,  141,  133,  134,  140,  140,  133,
        0,  141,  139,  139,    0,  142,    0,  140,  140,    0,
      141,  141,  142,  143,  143,    0,  146,  143,    0,  145,
        0,  142,  142,  146,  147,  143,  145,  143,    0,    0,
        0,  147,  146,  146,    0,  145,  145,    0,    0,    0,
      147,  147,    0,  147,    0,  148,    0,  146,    0,    0,
      145,  203,  148,  145,    0,  197,  143,  143,  144,    0,

      145,  148,  148,    0,  148,  144,  149,  203,  203,  150,
        0,  197,  197,  149,  144,  144,  150,  197,    0,    0,
      144,  148,  149,  149,  151,  150,  150,  144,  144,  152,
        0,  151,  144,  144,  144,  153,  152,    0,    0,  149,
      151,  151,  153,  204,  150,  152,  152,  154,    0,    0,
      152,  153,  153,  151,  154,    0,    0,    0,    0,  204,
      204,  152,    0,  154,  154,  154,  152,  152,    0,    0,
        0,  153,  155,  155,  155,  155,  155,  155,  204,  182,
      182,  182,  155,    0,  182,  155,  157,  157,  157,  157,
      157,  157,  182,    0,  182,    0,  157,    0,  198,  157,

      158,  158,  158,  158,  158,  158,    0,  188,  188,  191,
      158,  188,  199,  158,  198,  198,    0,    0,    0,  188,
      198,  188,    0,  182,  182,  191,  191,  200,  199,  199,
      201,    0,  206,  199,    0,  191,    0,  205,  191,    0,
        0,    0,    0,  200,  200,  202,  201,  201,  206,  206,
      188,  188,  201,  205,  205,  206,  200,  200,  200,  207,
        0,  202,  202,  208,  202,  200,  209,  205,    0,    0,
        0,  210,    0,    0,  211,  207,  207,  212,    0,  208,
      208,  202,  209,  209,  215,  208,  209,  210,  210,  210,
      211,  211,  213,  212,  212,  207,    0,    0,    0,  214,

      215,  215,  216,  209,  217,    0,  211,    0,  213,  213,
      218,    0,  212,  219,  213,  214,  214,    0,  216,  216,
      217,  217,  215,  220,  214,    0,  218,  218,  218,  219,
      219,  221,    0,  219,  222,    0,    0,    0,  223,  220,
      220,  217,    0,  224,    0,    0,    0,  221,  221,  225,
      222,  222,  226,  222,  223,  223,  227,    0,  220,  224,
      224,  224,  221,  228,    0,  225,  225,  229,  226,  226,
      230,    0,  227,  227,    0,  224,    0,    0,  231,  228,
      228,  232,    0,  229,  229,  233,  230,  230,  234,  226,
      235,  230,  227,  228,  231,  231,    0,  232,  232,  236,

        0,  233,  233,    0,  234,  234,  235,  235,  229,  237,
        0,  238,    0,  231,  239,  236,  236,  235,  234,  240,
      233,  232,  236,  242,  817,  237,  237,  238,  238,  241,
      239,  239,    0,  817,    0,  240,  240,  817,  817,  242,
      242,  237,  243,    0,  244,  241,  241,  245,    0,  242,
      239,  246,    0,  247,  240,  242,  240,    0,  243,  243,
      244,  244,  241,  245,  245,  244,  248,  246,  246,  247,
      247,    0,    0,  245,  247,    0,    0,    0,  243,  249,
        0,  250,  248,  248,  255,    0,    0,  251,  246,  247,
      252,    0,  247,  247,  253,  249,  249,  250,  250,    0,

      255,  255,  248,  251,  251,  251,  252,  252,  249,    0,
      253,  253,  254,    0,  256,    0,  251,  250,    0,  255,
        0,  257,  252,    0,  251,  259,  253,    0,  254,  254,
      256,  256,    0,    0,  258,    0,  256,  257,  257,  257,
        0,  259,  259,  257,  254,    0,  257,    0,    0,  254,
      258,  258,  260,  258,  261,    0,  257,  262,    0,    0,
      263,  259,  264,    0,  258,  265,    0,    0,  260,  260,
      261,  261,  266,  262,  262,  262,  263,  263,  264,  264,
        0,  265,  265,    0,  261,  267,  263,  268,  266,  266,
      269,  267,    0,    0,  266,  271,    0,  264,    0,  270,

      265,  267,  267,  268,  268,  270,  269,  269,    0,  268,
        0,  271,  271,  271,  272,  270,  270,  274,    0,  268,
        0,  272,  275,    0,  274,  279,    0,  269,  279,  275,
      272,  272,  279,  274,  274,  276,  276,  276,  275,  275,
      276,  279,  279,    0,    0,  280,    0,  281,  276,  282,
      276,  280,  280,  283,  281,  424,  282,    0,    0,  431,
      283,  280,  280,  281,  281,  282,  282,  284,    0,  283,
      283,  424,  424,    0,  284,  431,  431,  285,  285,  276,
      276,  285,    0,  284,  284,  311,  286,  311,    0,  285,
      287,  285,  288,  286,  311,  311,  428,  287,  289,  288,

      311,  311,  286,  286,    0,  289,  287,  287,  288,  288,
      288,  290,  428,  428,  289,  289,  291,  289,  290,  292,
      285,  285,  286,  291,  287,    0,  292,  290,  290,    0,
      293,  428,  291,  291,    0,  292,  292,  293,  294,    0,
        0,  290,  290,  295,    0,  294,  293,  293,  292,    0,
      295,  293,    0,    0,  294,  294,  296,    0,  297,  295,
      295,    0,  298,  296,    0,  297,    0,    0,    0,  298,
      294,    0,  296,  296,  297,  297,  299,  296,  298,  298,
      295,  300,    0,  299,  301,    0,    0,  303,  300,  305,
        0,  301,  299,  299,  303,    0,  305,  300,  300,  298,

      301,  301,  302,  303,  303,  305,  305,    0,  302,  302,
      304,  299,  302,  300,    0,  306,    0,  304,  302,  302,
        0,  301,  306,    0,  302,    0,  304,  304,  307,    0,
      304,  306,  306,  308,    0,  307,    0,  306,    0,  309,
      308,  310,    0,    0,  307,  307,  309,  312,  310,  308,
      308,    0,  308,    0,  312,  309,  309,  310,  310,  313,
      307,  314,  309,  312,  312,  315,  313,  314,  314,    0,
      308,  312,  315,  316,    0,  313,  313,  314,  314,    0,
      316,  315,  315,    0,  317,    0,  313,    0,    0,  316,
      316,  317,    0,    0,  315,  316,  318,  314,    0,  319,

      317,  317,  320,  318,  321,  316,  319,  322,  317,  320,
        0,  321,  318,  318,  322,  319,  319,    0,  320,  320,
      321,  321,  323,  322,  322,    0,  321,  324,    0,  323,
        0,    0,    0,  325,  324,    0,    0,  320,  323,  323,
      325,  323,  322,  324,  324,    0,    0,  326,    0,  325,
      325,  327,    0,  328,  326,    0,    0,    0,  327,  329,
      328,    0,  324,  326,  326,  331,  329,  327,  327,  328,
      328,  332,  331,  326,    0,  329,  329,    0,  332,    0,
      430,  331,  331,    0,    0,    0,  327,  332,  332,  333,
      333,  333,  336,    0,  333,  336,  430,  430,  430,  336,

      337,    0,  333,    0,  333,  429,  337,  337,  336,  336,
      338,  338,  338,  338,  338,  338,  337,  337,    0,  340,
      338,  429,  429,  338,    0,    0,  340,  340,  340,    0,
        0,  429,    0,  333,  333,  340,  340,  341,  341,  342,
        0,  341,  828,  828,  828,  828,  342,  350,  828,  341,
        0,  341,  438,    0,  350,  342,  342,  343,  343,  343,
      343,  343,  343,  350,  350,    0,    0,  343,  438,  438,
      343,  352,  345,  345,  345,  345,  345,  345,  352,  353,
      341,  341,  345,    0,    0,  345,  353,  352,  352,  354,
      354,  354,    0,  358,  354,  353,  353,    0,  357,  358,

      358,  357,  354,  434,  354,  357,  359,    0,    0,  358,
      358,  360,    0,  359,  357,  357,    0,    0,  360,  434,
      434,  434,  359,  359,  362,  361,  361,  360,  360,  361,
        0,  362,  432,  354,  354,  363,    0,  361,  364,  361,
      362,  362,  363,    0,    0,  364,  365,    0,  432,  432,
        0,  363,  363,  365,  364,  364,    0,  366,    0,  439,
      362,    0,  365,  365,  366,  363,  363,  432,  361,  361,
      364,  367,    0,  366,  366,  439,  439,  368,  367,  369,
        0,    0,  437,  365,  368,    0,  369,  367,  367,  369,
      370,  439,  366,  368,  368,  369,  369,  370,  437,  437,

      437,  369,  371,  367,  372,    0,  370,  370,    0,  371,
      373,  372,  442,    0,  368,  374,    0,  373,  371,  371,
      372,  372,  374,  375,  371,    0,  373,  373,  442,  442,
      375,  374,  374,  373,    0,    0,    0,  376,    0,  375,
      375,  372,  377,  442,  376,  374,  440,  375,    0,  377,
      378,  374,  374,  376,  376,    0,    0,  378,  377,  377,
        0,  379,  440,  440,  376,    0,  378,  378,  379,    0,
        0,  377,  378,  380,    0,  381,  440,  379,  379,  440,
      380,  382,  381,    0,    0,  379,  383,    0,  382,  380,
      380,  381,  381,  383,    0,  380,  448,  382,  382,  385,

        0,  386,  383,  383,    0,    0,  385,    0,  386,    0,
      381,  433,  448,  448,    0,  385,  385,  386,  386,  387,
      387,  387,  390,    0,  387,  390,  393,  433,  433,  390,
      391,    0,  387,  393,  387,    0,  391,  391,  390,  390,
      392,  392,  393,  393,  392,    0,  391,  391,    0,  394,
        0,    0,  392,  433,  392,  395,  394,    0,    0,    0,
      393,  396,  395,  387,  387,  394,  394,  394,  396,  397,
        0,  395,  395,  398,  395,  399,  397,  396,  396,    0,
      398,    0,  399,  392,  392,  397,  397,    0,  400,  398,
      398,  399,  399,  401,  398,  400,  399,    0,  397,  402,

      401,    0,    0,  435,  400,  400,  402,  404,    0,  401,
      401,  403,    0,  401,  404,  402,  402,    0,  403,  435,
      435,    0,  405,  404,  404,  400,    0,  403,  403,  405,
      406,  402,  435,  407,    0,  403,    0,  406,  405,  405,
      407,  408,    0,  404,    0,  409,  406,  406,  408,  407,
      407,    0,  409,  449,  405,    0,  410,  408,  408,    0,
      408,  409,  409,  410,  443,  406,  436,    0,  407,  449,
      449,  409,  410,  410,  411,  411,  411,  411,  411,  411,
      443,  443,  436,  436,  411,  443,  436,  411,  529,    0,
      529,  410,  413,  413,  413,  413,  413,  413,  529,    0,

        0,  441,  413,  529,  529,  413,  426,  444,    0,  426,
        0,    0,    0,    0,  426,  426,  426,  441,  441,  426,
        0,  441,  441,  444,  444,  445,  426,  426,    0,  426,
      426,  426,  446,    0,  447,    0,  450,  441,  441,    0,
      452,  445,  445,    0,    0,  444,    0,  445,  446,  446,
      447,  447,  450,  450,  446,  453,  452,  452,  426,  426,
      427,  451,  452,  427,    0,    0,    0,  447,  427,  427,
      427,  453,  453,  427,    0,    0,  450,  451,  451,  454,
      427,  427,  456,  427,  427,  427,  455,    0,  457,    0,
      451,  458,  453,  459,  457,  454,  454,    0,  456,  456,

      454,  460,  455,  455,  457,  457,    0,  458,  458,  459,
      459,  461,  427,  427,    0,  462,  455,  460,  460,    0,
        0,  463,  456,  464,    0,  465,  459,  461,  461,  466,
      460,  462,  462,  461,  467,    0,  462,  463,  463,  464,
      464,  465,  465,  463,  464,  466,  466,  468,    0,  466,
      467,  467,  469,    0,  470,    0,  471,    0,  465,    0,
      472,    0,    0,  468,  468,  473,    0,  474,  469,  469,
      470,  470,  471,  471,    0,  469,  472,  472,    0,  468,
      475,  473,  473,  474,  474,  476,  474,  477,    0,  472,
        0,  471,  470,  478,    0,  473,  475,  475,    0,    0,

      479,  476,  476,  477,  477,  480,  476,  481,    0,  478,
      478,  482,    0,    0,  483,  478,  479,  479,    0,  484,
        0,  480,  480,  481,  481,  479,  480,  482,  482,  478,
      483,  483,    0,  485,  482,  484,  484,  486,  481,  483,
      487,    0,  488,    0,  489,    0,    0,    0,  482,  485,
      485,  490,    0,  486,  486,  491,  487,  487,  488,  488,
      489,  489,    0,  486,    0,  492,  489,  490,  490,    0,
      485,  491,  491,  493,    0,  494,    0,  495,  487,  496,
      488,  492,  492,    0,  497,    0,  490,  492,  498,  493,
      493,  494,  494,  495,  495,  496,  496,  499,    0,  495,

      497,  497,    0,  500,  498,  498,  498,    0,    0,  500,
      494,  501,    0,  499,  499,  502,    0,  503,  499,  500,
      500,  506,    0,  504,  497,  505,    0,  501,  501,  507,
        0,  502,  502,  503,  503,  508,  502,  506,  506,  504,
      504,  505,  505,  505,  509,  507,  507,  510,  501,    0,
        0,  508,  508,    0,  503,  502,  504,  506,  511,  507,
      509,  509,  512,  510,  510,    0,  509,  510,  513,    0,
      509,    0,  508,  514,  511,  511,  515,    0,  512,  512,
      516,  511,    0,  517,  513,  513,  518,  513,  512,  514,
      514,    0,  515,  515,    0,    0,  516,  516,  512,  517,

      517,  519,  518,  518,  520,    0,    0,  515,    0,  521,
        0,  518,  517,  514,    0,  516,  521,  519,  519,  627,
      520,  520,  525,    0,    0,  521,  521,  527,    0,  525,
      530,    0,  519,    0,  527,  627,  627,  530,  525,  525,
        0,  520,  523,  527,  527,  523,  530,  530,    0,    0,
      523,  523,  523,  526,  525,  523,  627,  523,  630,    0,
      526,  528,  523,  523,  531,  523,  523,  523,  528,  526,
      526,  531,    0,    0,  630,  630,  533,  528,  528,    0,
      531,  531,    0,  533,  630,  631,    0,    0,    0,  526,
        0,  528,  533,  533,  523,  523,  524,    0,    0,  524,

        0,  631,  631,    0,  524,  524,  524,  532,    0,  524,
        0,  524,  635,  533,  532,  535,  524,  524,    0,  524,
      524,  524,  535,  532,  532,  534,    0,  534,  635,  635,
        0,  535,  535,    0,  534,  534,  534,  535,  536,    0,
      534,  534,  532,  534,  537,  536,  538,  635,  524,  524,
      539,  537,    0,  538,  536,  536,    0,  539,    0,    0,
      537,  537,  538,  538,    0,  540,  539,  539,  536,  541,
        0,  538,  540,  542,  537,  539,  541,  543,    0,    0,
      542,  540,  540,    0,  543,  541,  541,  537,  544,  542,
      542,  545,    0,  543,  543,  544,    0,    0,  545,  541,

      541,    0,  542,  546,  544,  544,    0,  545,  545,    0,
      546,  547,  543,  545,  548,    0,  549,    0,  547,  546,
      546,  548,  550,  549,    0,  546,  636,  547,  547,  550,
      548,  548,  549,  549,  551,    0,    0,  552,  550,  550,
      550,  551,  636,  636,  552,    0,  548,  628,  547,  553,
      551,  551,  549,  552,  552,  554,  553,    0,    0,  552,
      555,  636,  554,  628,  628,  553,  553,  555,  556,    0,
      551,  554,  554,  557,  553,  556,  555,  555,    0,  558,
      557,    0,    0,  628,  556,  556,  558,    0,  556,  557,
      557,  559,    0,    0,    0,  558,  558,    0,  559,  560,

        0,    0,  555,    0,  558,  561,  560,  559,  559,    0,
      557,    0,  561,  562,    0,  560,  560,    0,  563,  560,
      562,  561,  561,  561,  564,  563,    0,    0,  559,  562,
      562,  564,    0,  562,  563,  563,  565,    0,    0,    0,
      564,  564,    0,  565,  566,    0,    0,  576,  563,  562,
      581,  566,  565,  565,  576,  564,    0,  581,  580,    0,
      566,  566,  585,  576,  576,  580,  581,  581,    0,  585,
        0,    0,  565,  568,  580,  580,  568,    0,  585,  585,
      581,  568,  568,  568,  582,    0,  568,  629,  568,    0,
      580,  582,  585,  568,  568,  584,  568,  568,  568,  583,

      582,  582,  584,  629,  629,  814,  583,  582,    0,    0,
        0,  584,  584,    0,  814,  583,  583,    0,  814,  814,
      582,  814,  586,  629,    0,  568,  568,  569,  632,  586,
      569,    0,  584,    0,  583,  569,  569,  569,  586,  586,
      569,    0,  569,  645,  632,  632,  587,  569,  569,    0,
      569,  569,  569,  587,    0,    0,  632,  588,    0,  645,
      645,  591,  587,  587,  588,  586,    0,  645,  591,  589,
        0,  587,    0,  588,  588,    0,  589,  591,  591,  569,
      569,  578,    0,  591,  578,  589,  589,    0,    0,  578,
      578,  578,    0,    0,  578,    0,  578,    0,    0,  589,

      589,  578,  578,  592,  578,  578,  578,  590,    0,  593,
      592,  594,    0,  640,  590,  596,  593,    0,  594,  592,
      592,    0,  596,  590,  590,  593,  593,  594,  594,  640,
      640,  596,  596,  578,  578,  579,    0,  596,  579,  640,
      592,  593,  590,  579,  579,  579,  595,  594,  579,    0,
      579,    0,  642,  595,  597,  579,  579,    0,  579,  579,
      579,  597,  595,  595,  595,  598,    0,  599,  642,  642,
      597,  597,  598,  600,  599,    0,    0,    0,  642,    0,
      600,  598,  598,  599,  599,  598,  644,  579,  579,  600,
      600,  601,  599,  600,  602,    0,  597,  608,  601,    0,

      634,  602,  644,  644,  608,    0,    0,  601,  601,  601,
      602,  602,  604,  608,  608,  604,  634,  634,    0,  608,
      604,  604,  604,  606,  644,  604,  637,  604,  634,    0,
      606,  609,  604,  604,  610,  604,  604,  604,  609,  606,
      606,  610,  637,  637,  637,  611,    0,  609,  609,    0,
      610,  610,  611,    0,    0,    0,  612,    0,    0,  606,
      609,  611,  611,  612,  604,  604,  605,  633,    0,  605,
      610,    0,  612,  612,  605,  605,  605,    0,  613,  605,
        0,  605,  611,  633,  633,  613,  605,  605,    0,  605,
      605,  605,  614,  612,  613,  613,  613,    0,  615,  614,

      648,    0,    0,    0,  633,  615,  616,    0,  614,  614,
        0,    0,  614,  616,  615,  615,  648,  648,  605,  605,
      607,    0,  616,  616,    0,    0,    0,  607,  614,  615,
        0,  639,  623,  623,    0,  623,  607,  607,  623,    0,
      623,    0,  616,  607,    0,  638,    0,  639,  639,  641,
      607,    0,  607,  639,  623,    0,  607,  607,  643,  607,
      624,  638,  638,  624,    0,  641,  641,    0,  624,  624,
      624,  638,  646,  624,  643,  643,  647,  638,    0,    0,
      649,  624,  650,  624,  624,  624,  641,  651,  646,  646,
        0,  652,  647,  647,  654,  643,  649,  649,  650,  650,

        0,  646,    0,  651,  651,    0,    0,  652,  652,    0,
      654,  654,  624,  624,  626,  649,  647,  626,  651,    0,
      650,    0,  626,  626,  626,  653,    0,  626,  652,  654,
      655,    0,  656,    0,  657,  626,    0,  626,  626,  626,
        0,  653,  653,  653,    0,    0,  655,  655,  656,  656,
      657,  657,  658,    0,  659,    0,    0,  656,  660,    0,
      661,  655,  662,    0,  663,    0,  626,  626,  658,  658,
      659,  659,  657,  658,  660,  660,  661,  661,  662,  662,
      663,  663,  664,    0,  665,    0,  666,  660,  667,  663,
      659,  668,    0,    0,    0,  669,    0,    0,  664,  664,

      665,  665,  666,  666,  667,  667,  670,  668,  668,  671,
      665,  669,  669,  669,  672,  666,  673,  668,  674,    0,
      667,    0,  670,  670,  675,  671,  671,  676,  670,    0,
      672,  672,  673,  673,  674,  674,  677,    0,  673,  678,
      675,  675,  679,  676,  676,  672,    0,    0,    0,  680,
        0,  681,  677,  677,  682,  678,  678,    0,  679,  679,
      683,  678,  677,  679,  676,  680,  680,  681,  681,  684,
      682,  682,  685,    0,  682,  686,  683,  683,    0,  687,
        0,    0,    0,  681,  688,  684,  684,  684,  685,  685,
      683,  686,  686,  689,    0,  687,  687,  690,  685,  687,

      688,  688,    0,  691,  688,  692,    0,  693,    0,  689,
      689,  686,  694,  690,  690,  695,    0,  696,  690,  691,
      691,  692,  692,  693,  693,    0,  697,    0,  694,  694,
        0,  695,  695,  696,  696,    0,  698,    0,  699,  691,
        0,  692,  697,  697,  700,  693,    0,  694,  701,    0,
      702,  695,  698,  698,  699,  699,  699,    0,  703,    0,
      700,  700,  704,  697,  701,  701,  702,  702,  705,    0,
        0,  706,    0,  698,  703,  703,  707,    0,  704,  704,
      703,  702,  708,    0,  705,  705,  705,  706,  706,  709,
        0,    0,  707,  707,  710,    0,    0,  711,  708,  708,

        0,    0,    0,    0,  704,  709,  709,  709,  707,  712,
      710,  710,  713,  711,  711,  714,  710,    0,  708,  711,
        0,  911,  911,  911,  911,  712,  712,  911,  713,  713,
      713,  714,  714,  718,  718,  714,  718,  723,    0,  718,
        0,  718,    0,    0,  723,  725,    0,    0,    0,    0,
        0,  724,  725,  723,  723,  718,  720,  723,  724,  720,
        0,  725,  725,    0,  720,  720,  720,  724,  724,  720,
        0,  720,    0,    0,    0,  726,    0,  720,  727,  720,
      720,  720,  726,  725,    0,  727,  728,  724,    0,  729,
        0,  726,  726,  728,  727,  727,  729,    0,    0,    0,

      730,  726,  728,  728,    0,  729,  729,  730,  720,  720,
      722,  837,    0,  722,    0,  727,  730,  730,  722,  722,
      722,  729,  731,  722,    0,  733,    0,  837,  837,  731,
      730,  722,  733,  722,  722,  722,    0,  730,  731,  731,
      732,  733,  733,    0,  734,    0,    0,  732,  735,    0,
      733,  734,  731,    0,    0,  735,  732,  732,    0,    0,
      734,  734,  722,  722,  735,  735,  736,    0,    0,  737,
      732,  738,    0,  736,  739,    0,  737,  732,  738,  735,
        0,  739,  736,  736,  736,  737,  737,  738,  738,    0,
      739,  739,  740,  738,  741,    0,  739,  742,    0,  740,

      743,  741,    0,    0,  742,  744,    0,  743,  740,  740,
      741,  741,  744,  742,  742,    0,  743,  743,    0,  745,
        0,  744,  744,  744,  740,  746,  745,  741,    0,    0,
      747,    0,  746,  748,  742,  745,  745,  747,  743,  843,
      748,  746,  746,    0,  749,    0,  747,  747,  745,  748,
      748,  749,  750,    0,    0,  843,  843,    0,  751,  750,
      749,  749,  749,  752,    0,  751,  746,    0,  750,  750,
      752,  753,    0,  750,  751,  751,    0,  754,  753,  752,
      752,    0,  755,  752,  754,    0,    0,  753,  753,  755,
        0,    0,    0,  754,  754,  756,    0,    0,  755,  755,

        0,    0,  756,  753,  755,    0,  757,  754,  758,    0,
        0,  756,  756,  757,  759,  758,    0,  756,    0,  760,
        0,  759,  757,  757,  758,  758,  760,    0,    0,    0,
      759,  759,  761,    0,  762,  760,  760,    0,  765,  761,
      759,  762,  842,  757,  758,  765,  763,    0,  761,  761,
      762,  762,  763,  763,  765,  765,  760,  764,  842,  842,
        0,  761,  763,  763,  764,    0,  762,    0,  842,  769,
      769,    0,  769,  764,  764,  769,    0,  769,    0,    0,
      786,  764,  780,  780,    0,  780,    0,  786,  780,    0,
      780,  769,  771,    0,    0,  771,  786,  786,    0,    0,

      771,  771,  771,  785,  780,  771,    0,  771,    0,    0,
      785,  839,    0,  771,  787,  771,  771,  771,  786,  785,
      785,  787,  796,  785,    0,  788,    0,  839,  839,  796,
      787,  787,  788,  839,  844,    0,  789,    0,  796,  796,
      787,  788,  788,  789,  771,  771,  773,    0,    0,  773,
      844,  844,  789,  789,  773,  773,  773,  790,    0,  773,
        0,    0,  788,  796,  790,  791,    0,  773,  789,  773,
      773,  773,  791,  790,  790,  790,    0,  794,    0,  792,
        0,  791,  791,    0,  794,    0,  792,  791,  845,    0,
      800,    0,    0,  794,  794,  792,  792,  800,  773,  773,

      782,  792,    0,  782,  845,  845,  800,  800,  782,  782,
      782,  793,    0,  782,  794,  782,  846,    0,  793,  795,
      800,  782,  797,  782,  782,  782,  795,  793,  793,  797,
        0,    0,  846,  846,  798,  795,  795,  795,  797,  797,
      797,  798,  840,    0,  793,    0,    0,  846,    0,  799,
      798,  798,  782,  782,  784,  798,  799,  784,  840,  840,
        0,  840,  784,  784,  784,  799,  799,  784,    0,  799,
        0,    0,    0,  801,    0,  784,  802,  784,  784,  784,
      801,  804,    0,  802,  803,    0,    0,  813,  804,  801,
      801,  803,  802,  802,  813,  801,    0,  804,  804,    0,

      803,  803,    0,  813,  813,  815,  784,  784,  808,  808,
      803,  808,  815,  802,  808,    0,  808,    0,  804,  816,
        0,  815,  815,  813,    0,    0,  816,    0,    0,    0,
      808,  810,    0,    0,  810,  816,  816,    0,    0,  810,
      810,  810,    0,  818,  810,    0,  810,    0,    0,  816,
      818,    0,  810,    0,  810,  810,  810,    0,  819,  818,
      818,    0,  820,    0,  821,  819,    0,    0,  818,  820,
        0,  821,    0,    0,  819,  819,    0,    0,  820,  820,
      821,  821,    0,  810,  810,  812,  821,    0,  812,  819,
        0,    0,    0,  812,  812,  812,  822,    0,  812,  848,

      820,    0,    0,  822,  823,    0,  812,  824,  812,  812,
      812,  823,  822,  822,  824,  848,  848,    0,  825,    0,
      823,  823,    0,  824,  824,  825,  838,    0,  841,    0,
      848,    0,  822,    0,  825,  825,  824,  812,  812,  826,
        0,  823,  838,  838,  841,  841,  826,    0,  838,  841,
      825,  827,  827,    0,  827,  826,  826,  827,  838,  827,
        0,    0,  847,  826,  831,  831,    0,  831,    0,    0,
      831,    0,  831,  827,  830,    0,    0,  830,  847,  847,
        0,    0,  830,  830,  830,    0,  831,  830,  849,  834,
      834,  847,    0,  834,    0,  830,    0,  830,  830,  830,

      853,  834,  850,  834,  849,  849,  849,  836,  836,    0,
      836,    0,    0,  836,    0,  836,  853,  853,  850,  850,
        0,    0,    0,    0,    0,    0,  830,  830,  833,  836,
      851,  833,  834,  834,    0,    0,  833,  833,  833,  850,
      852,  833,  854,    0,  855,    0,  851,  851,  851,  833,
      856,  833,  833,  833,    0,    0,  852,  852,  854,  854,
      855,  855,  854,    0,    0,    0,  856,  856,  857,    0,
      858,  852,  856,  859,    0,    0,  860,    0,    0,    0,
      833,  833,  861,    0,  857,  857,  858,  858,    0,  859,
      859,  862,  860,  860,  859,  863,  858,  860,  861,  861,

      864,    0,    0,  857,  861,    0,  865,  862,  862,  866,
        0,  863,  863,    0,    0,  867,  864,  864,  864,  868,
        0,  863,  865,  865,  869,  866,  866,  870,  862,  871,
      866,  867,  867,  872,    0,  868,  868,    0,    0,    0,
      869,  869,  873,  870,  870,  871,  871,  874,    0,  872,
      872,  875,    0,  867,    0,  872,  876,    0,  873,  873,
      869,    0,    0,  874,  874,    0,    0,  875,  875,  877,
      871,  878,  876,  876,    0,    0,  879,    0,  874,  880,
      875,  881,  873,  882,    0,  877,  877,  878,  878,    0,
        0,  876,  879,  879,  883,  880,  880,  881,  881,  882,

      882,  881,  884,    0,  885,  877,  877,    0,  880,    0,
      883,  883,  886,    0,  887,    0,    0,  888,  884,  884,
      885,  885,  889,    0,  884,  883,  885,  890,  886,  886,
      887,  887,  891,  888,  888,    0,  892,    0,  889,  889,
      893,  886,  888,  890,  890,  894,    0,  895,  891,  891,
      896,  887,  892,  892,  891,    0,  893,  893,  897,  889,
      893,  894,  894,  895,  895,  898,  896,  896,    0,    0,
        0,  894,  899,    0,  897,  897,  900,    0,  901,    0,
        0,  898,  898,    0,  897,  902,  896,  903,  899,  899,
      904,    0,  900,  900,  901,  901,  899,  905,    0,    0,

      898,  902,  902,  903,  903,  906,  904,  904,  907,    0,
      908,    0,  909,  905,  905,    0,  902,    0, 1017,    0,
        0,  906,  906,  903,  907,  907,  908,  908,  909,  909,
      910,  910,  905,  910, 1017, 1017,  910,  909,  910,    0,
        0,  920,    0,  913,  913,  908,  913,    0,  920,  913,
        0,  913,  910,  912,    0, 1026,  912,  920,  920,    0,
        0,  912,  912,  912,    0,  913,  912,  920,  912,  917,
      917, 1026, 1026,  917,  912,    0,  912,  912,  912,  919,
      919,  917,  919,  917, 1026,  919,  921,  919,  955,  955,
      955,  955,  922,  921,  955,    0,    0,    0,    0,  922,

        0,  919,  921,  921,    0,  912,  912,  916,  922,  922,
      916,    0,  917,  917,    0,  916,  916,  916,  923,    0,
      916,  965,  965,  965,  965,  923,    0,  965,  916,  922,
      916,  916,  916,  924,  923,  923,  925,    0,  926,    0,
      924,  927,  923,  925,    0,  926,    0,    0,  927,  924,
      924,    0,  925,  925,  926,  926,    0,  927,  927,  916,
      916,  918,    0,  926,  918,    0,  927,    0,  924,  918,
      918,  918,  928,    0,  918,    0,  918,    0,    0,  928,
      929,    0,  918,  931,  918,  918,  918,  929,  928,  928,
      931,  930,    0,  928,  932,    0,  929,  929,  930,  931,

      931,  932,    0,  992,  992,  992,  992,  930,  930,  992,
      932,  932,  933,  918,  918,    0,  934,  929,  931,  933,
      935,    0,  930,  934,    0,    0,  932,  935,  933,  933,
        0,  936,  934,  934,    0,    0,  935,  935,  936,  937,
        0,  935,  934,  938,  933,  939,  937,  936,  936,    0,
      938,    0,  939,    0,    0,  937,  937,  940,    0,  938,
      938,  939,  939,  941,  940,  942,    0,    0,  936,  939,
      941,  943,  942,  940,  940,  940,    0,  944,  943,  941,
      941,  942,  942,    0,  944,  945,    0,  943,  943,    0,
        0,    0,  945,  944,  944,    0,    0,  942,  944,  946,

      941,  945,  945,  943,  947,  945,  946,  948,    0,    0,
      949,  947,  950,    0,  948,  946,  946,  949,    0,  950,
      947,  947,    0,  948,  948,  948,  949,  949,  950,  950,
      950,  951,  949,  952,    0,  953,    0,    0,  951,    0,
      952,    0,  953,    0,    0,    0,  949,  951,  951,  952,
      952,  953,  953,  954,  954,    0,  954,  974,  952,  954,
        0,  954,    0,    0,  974,    0,  951,    0,  961,  961,
        0,    0,  961,  974,  974,  954,  956,    0,    0,  956,
      961,    0,  961,  974,  956,  956,  956,  957,  957,  956,
      957,  956,    0,  957,    0,  957,    0,  956,    0,  956,

      956,  956,  963,  963,    0,  963,    0,    0,  963,  957,
      963,  961,  961,  964,  964, 1018,  964,    0,    0,  964,
        0,  964,  971,  971,  963,    0,  971,    0,  956,  956,
      960, 1018, 1018,  960,  971,  964,  971,    0,  960,  960,
      960,  967,  967,  960,  967,    0,    0,  967,    0,  967,
     1018,  960,    0,  960,  960,  960,  973,  973,    0,  973,
        0,    0,  973,  967,  973,  971,  971,    0,    0,  975,
        0,    0,  976,    0,  982,    0,  975,    0,  973,  976,
        0,  982,  960,  960,  962,  975,  975,  962,  976,  976,
      982,  982,  962,  962,  962,  977,  976,  962,    0,  962,

      982,    0,  977,  978,    0,  962,  975,  962,  962,  962,
      978,  977,  977,    0,    0,  980,    0,    0,  979,  978,
      978,    0,  980,    0,    0,  979,  981,    0, 1020,    0,
      977,  980,  980,  981,  979,  979,  962,  962,  966, 1019,
      978,  966,  981,  981, 1020, 1020,  966,  966,  966,  979,
      980,  966,    0,  966,    0, 1019, 1019,  983,  981,  966,
      984,  966,  966,  966,  983,  985, 1020,  984,    0, 1031,
        0,  986,  985,  983,  983, 1019,  984,  984,  986,    0,
     1021,  985,  985,  985,  984, 1031, 1031,  986,  986, 1031,
      966,  966,  968,    0,  983,  968, 1021, 1021,    0,    0,

      968,  968,  968,  987,    0,  968,    0,  968,  986,    0,
      987,  988, 1021,  968,  990,  968,  968,  968,  988,  987,
      987,  990,  989,    0,    0,    0, 1001,  988,  988,  989,
      990,  990,  988, 1001, 1008,  987,  990,    0,  989,  989,
      989, 1008, 1001, 1001,  968,  968,  970,    0, 1001,  970,
     1008, 1008, 1008,    0,  970,  970,  970,  991,  991,  970,
      991,    0,    0,  991,    0,  991,    0,  970,    0,  970,
      970,  970,  994,  994,    0,  994,    0,    0,  994,  991,
      994,    0,    0,  998,  998, 1000, 1000,  998, 1000, 1002,
        0, 1000,    0, 1000,  994,  998, 1002,  998,  970,  970,

      972, 1023,    0,  972,    0, 1002, 1002, 1000,  972,  972,
      972,    0, 1003,  972, 1002,  972,    0, 1023, 1023, 1003,
        0,  972, 1023,  972,  972,  972,  998,  998, 1003, 1003,
     1011, 1011, 1011, 1011, 1004,    0, 1011, 1003,    0, 1010,
     1010, 1004, 1010, 1022,    0, 1010,    0, 1010,    0, 1005,
     1004, 1004,  972,  972,  993, 1004, 1005,  993,    0, 1022,
     1022, 1010,  993,  993,  993, 1005, 1005,  993,    0,  993,
     1005,    0,    0, 1006, 1022,  993,    0,  993,  993,  993,
     1006,    0,    0,    0, 1007,    0,    0, 1009,    0, 1006,
     1006, 1007,    0, 1006, 1009,    0,    0, 1024, 1012, 1012,

     1007, 1007, 1012, 1009, 1009,    0,  993,  993,  995,    0,
     1012,  995, 1012, 1024, 1024,    0,  995,  995,  995, 1024,
     1007,  995, 1009,  995, 1016, 1016, 1016, 1016,    0,  995,
     1016,  995,  995,  995, 1025,    0,    0, 1014, 1014,    0,
     1014, 1012, 1012, 1014,    0, 1014, 1015, 1015,    0, 1015,
     1025, 1025, 1015,    0, 1015,    0, 1025, 1028,    0, 1014,
      995,  995,  997, 1027,    0,  997,    0,    0, 1015,    0,
      997,  997,  997, 1028, 1028,  997, 1032,    0, 1030, 1027,
     1027,    0, 1029,  997,    0,  997,  997,  997, 1028, 1027,
     1033,    0, 1032, 1032, 1030, 1030, 1034,    0, 1029, 1029,

     1030,    0, 1032,    0,    0, 1035, 1033, 1033,    0,    0,
        0,    0, 1034, 1034,  997,  997,  999, 1036, 1034,  999,
     1029, 1035, 1035,    0,  999,  999,  999, 1033, 1037,  999,
     1038,  999,    0, 1036, 1036,    0, 1039,  999, 1040,  999,
      999,  999,    0,    0, 1037, 1037, 1038, 1038, 1036, 1042,
        0,    0, 1039, 1039, 1040, 1040,    0,    0, 1041,    0,
     1040,    0,    0,    0,    0, 1042, 1042, 1038,  999,  999,
     1013, 1039,    0, 1013, 1041, 1041,    0,    0, 1013, 1013,
     1013, 1043,    0, 1013, 1044,    0, 1045,    0, 1046, 1041,
     1047, 1013, 1048, 1013, 1013, 1013, 1049, 1043, 1043,    0,

     1044, 1044, 1045, 1045, 1046, 1046, 1047, 1047, 1048, 1048,
     1046, 1050, 1049, 1049,    0, 1051, 1047, 1052,    0,    0,
     1044,    0, 1013, 1013, 1053,    0,    0, 1050, 1050, 1054,
        0, 1051, 1051, 1052, 1052, 1055, 1050, 1051,    0, 1056,
     1053, 1053, 1053, 1057,    0, 1054, 1054, 1058,    0,    0,
     1059, 1055, 1055, 1060, 1052, 1056, 1056, 1061,    0, 1057,
     1057, 1062,    0, 1058, 1058, 1057, 1059, 1059, 1063, 1060,
     1060, 1060, 1064, 1061, 1061, 1065,    0, 1062, 1062, 1061,
     1066,    0,    0, 1067, 1063, 1063, 1068,    0, 1064, 1064,
     1069, 1065, 1065,    0, 1070,    0, 1066, 1066, 1062, 1067,

     1067,    0, 1068, 1068,    0, 1071, 1069, 1069, 1068, 1064,
     1070, 1070, 1073, 1073, 1073, 1073,    0, 1065, 1073,    0,
     1067, 1071, 1071,    0,    0, 1069, 1148, 1072, 1072, 1070,
     1072,    0,    0, 1072,    0, 1072, 1074, 1074, 1076, 1076,
     1074, 1076, 1148, 1148, 1076,    0, 1076,    0, 1074, 1072,
     1074, 1077, 1077,    0, 1077, 1149,    0, 1077, 1079, 1077,
     1076, 1078, 1078, 1078, 1078, 1079,    0, 1078,    0,    0,
     1080, 1149, 1149, 1077, 1079, 1079, 1079, 1080, 1081, 1074,
     1074,    0, 1082,    0, 1083, 1081, 1080, 1080, 1080, 1082,
     1084, 1083, 1149,    0, 1081, 1081, 1085, 1084, 1082, 1082,

     1083, 1083, 1086, 1085,    0,    0, 1084, 1084, 1087, 1086,
     1083,    0, 1085, 1085, 1088, 1087, 1081,    0, 1086, 1086,
     1082, 1088, 1089,    0, 1087, 1087, 1090,    0, 1091, 1089,
     1088, 1088,    0, 1090,    0, 1091, 1087,    0, 1089, 1089,
     1092,    0, 1090, 1090, 1091, 1091,    0, 1092, 1093,    0,
     1091, 1088, 1090, 1094,    0, 1093, 1092, 1092,    0, 1089,
     1094, 1095, 1092, 1151, 1093, 1093, 1096,    0, 1095, 1094,
     1094,    0,    0, 1096, 1097,    0,    0, 1095, 1095, 1151,
     1151, 1097, 1096, 1096,    0, 1093, 1098,    0, 1099, 1095,
     1097, 1097, 1100, 1098,    0, 1099, 1097,    0,    0, 1100,

        0, 1096, 1098, 1098, 1099, 1099,    0,    0, 1100, 1100,
        0, 1101,    0, 1102,    0, 1103, 1100, 1099, 1101, 1104,
     1102,    0, 1103, 1098,    0, 1154, 1104, 1101, 1101, 1102,
     1102, 1103, 1103,    0,    0, 1104, 1104, 1105, 1105,    0,
     1105, 1154, 1154, 1105,    0, 1105,    0,    0,    0, 1102,
        0, 1104, 1103,    0, 1106, 1106, 1106, 1106,    0, 1105,
     1106, 1107, 1107, 1109, 1109, 1107, 1109,    0,    0, 1109,
        0, 1109,    0, 1107, 1130, 1107, 1110, 1110,    0, 1110,
        0, 1130, 1110,    0, 1110, 1109, 1111, 1111, 1111, 1111,
     1130, 1130, 1111, 1112, 1112,    0, 1112,    0, 1110, 1112,

        0, 1112,    0, 1130, 1107, 1107, 1113, 1113, 1113, 1113,
     1114, 1114, 1113,    0, 1114, 1112,    0, 1116, 1116,    0,
     1116,    0, 1114, 1116, 1114, 1116, 1117, 1117,    0, 1117,
     1156,    0, 1117, 1119, 1117, 1118, 1118, 1118, 1118, 1116,
     1119, 1118,    0,    0,    0, 1120, 1156, 1156, 1117, 1119,
     1119, 1119, 1120, 1114, 1114,    0,    0, 1121,    0, 1122,
        0, 1120, 1120, 1120, 1121, 1123, 1122, 1156, 1158,    0,
     1124,    0, 1123, 1121, 1121, 1122, 1122, 1124,    0,    0,
        0, 1123, 1123, 1125, 1158, 1158, 1124, 1124,    0,    0,
     1125,    0,    0,    0, 1126, 1121, 1127, 1122,    0, 1125,

     1125, 1126, 1123, 1127,    0, 1125,    0, 1124, 1128,    0,
     1126, 1126, 1127, 1127, 1129, 1128, 1126, 1133, 1133, 1133,
     1133, 1129, 1131, 1133, 1128, 1128,    0,    0, 1162, 1131,
     1129, 1129,    0, 1127, 1132, 1132, 1129, 1132, 1131, 1131,
     1132,    0, 1132, 1128, 1162, 1162, 1131, 1134, 1134, 1136,
     1136, 1134, 1136,    0,    0, 1136, 1132, 1136,    0, 1134,
     1139, 1134, 1137, 1137,    0, 1137, 1166, 1139, 1137,    0,
     1137, 1136, 1138, 1138, 1138, 1138, 1139, 1139, 1138,    0,
        0, 1140, 1166, 1166, 1137, 1141,    0, 1142, 1140,    0,
     1134, 1134, 1141, 1143, 1142,    0, 1139, 1140, 1140, 1144,

     1143, 1141, 1141, 1142, 1142, 1150, 1144, 1140,    0, 1143,
     1143, 1141,    0,    0,    0, 1144, 1144, 1145, 1145,    0,
     1145, 1150, 1150, 1145, 1142, 1145, 1147,    0,    0, 1143,
     1152, 1146, 1146, 1146, 1146,    0, 1144, 1146, 1153, 1145,
     1155,    0, 1147, 1147, 1157, 1150, 1152, 1152,    0,    0,
        0,    0, 1147,    0, 1153, 1153, 1155, 1155, 1159,    0,
     1157, 1157, 1160,    0, 1161, 1152, 1157, 1163, 1147, 1153,
        0, 1164, 1155,    0, 1159, 1159,    0,    0, 1160, 1160,
     1161, 1161,    0, 1163, 1163, 1165, 1161, 1164, 1164, 1163,
     1167,    0, 1168, 1164,    0, 1159, 1169,    0, 1170, 1160,

     1171, 1165, 1165,    0,    0,    0, 1167, 1167, 1168, 1168,
     1172, 1167, 1169, 1169, 1170, 1170, 1171, 1171, 1173,    0,
     1165, 1174, 1171, 1175,    0,    0, 1172, 1172, 1176,    0,
     1177,    0, 1178,    0, 1173, 1173, 1179, 1174, 1174, 1175,
     1175, 1170, 1180,    0, 1176, 1176, 1177, 1177, 1178, 1178,
     1174, 1181, 1179, 1179, 1178, 1182,    0,    0, 1180, 1180,
     1183,    0, 1184, 1176,    0,    0,    0, 1181, 1181,    0,
        0, 1182, 1182, 1233, 1179,    0, 1183, 1183, 1184, 1184,
     1185, 1185,    0, 1185,    0,    0, 1185, 1181, 1185, 1233,
     1233,    0, 1183, 1187, 1184, 1186, 1186, 1186, 1186, 1188,

     1187, 1186, 1185,    0, 1189,    0, 1188, 1190,    0, 1187,
     1187, 1189, 1191,    0, 1190, 1188, 1188,    0, 1192, 1191,
     1189, 1189,    0, 1190, 1190, 1192,    0, 1190, 1191, 1191,
     1187, 1193,    0, 1194, 1192, 1192, 1188,    0, 1193, 1189,
     1194,    0,    0, 1191,    0, 1195,    0, 1193, 1193, 1194,
     1194, 1196, 1195, 1193,    0,    0,    0, 1197, 1196,    0,
        0, 1195, 1195, 1198, 1197,    0,    0, 1196, 1196,    0,
     1198, 1199, 1196, 1197, 1197, 1194, 1195, 1200, 1199, 1198,
     1198, 1198, 1201,    0, 1200, 1202,    0, 1199, 1199, 1201,
     1203,    0, 1202, 1200, 1200,    0,    0, 1203, 1201, 1201,

        0, 1202, 1202,    0,    0, 1204, 1203, 1203, 1205,    0,
     1200, 1202, 1204, 1201,    0, 1205, 1206,    0,    0, 1207,
        0, 1204, 1204, 1206, 1205, 1205, 1207,    0, 1209, 1209,
     1209, 1209, 1206, 1206, 1209, 1207, 1207, 1208, 1208,    0,
     1208,    0,    0, 1208, 1205, 1208,    0, 1204,    0,    0,
        0, 1207, 1206,    0, 1210, 1210,    0, 1210,    0, 1208,
     1210, 1212, 1210, 1211, 1211, 1211, 1211, 1213, 1212, 1211,
        0,    0, 1214,    0, 1213, 1215, 1210, 1212, 1212, 1214,
     1216,    0, 1215, 1213, 1213,    0,    0, 1216, 1214, 1214,
        0, 1215, 1215, 1217,    0, 1215, 1216, 1216, 1212, 1218,

     1217, 1219, 1216,    0, 1213, 1220, 1218, 1214, 1219, 1217,
     1217,    0, 1220,    0,    0, 1218, 1218, 1219, 1219, 1219,
     1218, 1220, 1220, 1221,    0, 1222,    0,    0, 1223, 1223,
     1221, 1223, 1222,    0, 1223, 1217, 1223,    0, 1220, 1221,
     1221, 1222, 1222, 1224, 1224, 1224, 1224,    0, 1225, 1224,
     1223,    0, 1226,    0, 1221, 1225, 1227,    0,    0, 1226,
        0,    0,    0, 1227, 1225, 1225,    0, 1222, 1226, 1226,
     1228,    0, 1227, 1227, 1229,    0, 1230, 1228, 1231, 1225,
     1232, 1229, 1227, 1226,    0, 1234, 1228, 1228, 1235,    0,
     1229, 1229, 1230, 1230, 1231, 1231, 1232, 1232, 1230, 1236,

     1231, 1234, 1234,    0, 1235, 1235, 1228, 1237,    0, 1238,
     1229, 1232, 1239,    0, 1240, 1236, 1236,    0,    0, 1235,
     1241,    0, 1234, 1237, 1237, 1238, 1238, 1242, 1239, 1239,
     1240, 1240, 1243,    0, 1239, 1236, 1241, 1241, 1244,    0,
        0, 1241, 1246, 1242, 1242, 1245,    0,    0, 1243, 1243,
        0,    0, 1247,    0, 1244, 1244, 1244, 1248, 1246, 1246,
        0, 1245, 1245, 1249, 1243, 1250,    0, 1245, 1247, 1247,
     1251,    0, 1252, 1248, 1248, 1253,    0, 1248, 1246, 1249,
     1249, 1250, 1250, 1254,    0,    0, 1251, 1251, 1252, 1252,
     1254, 1253, 1253,    0, 1255,    0,    0,    0,    0, 1254,

     1254, 1255, 1250,    0,    0,    0, 1256,    0,    0, 1254,
     1255, 1255, 1252, 1256, 1257, 1253,    0,    0, 1258,    0,
     1255, 1257, 1256, 1256, 1256, 1258,    0,    0,    0, 1259,
     1257, 1257,    0, 1260, 1258, 1258, 1259, 1261,    0,    0,
     1260, 1262, 1258, 1260, 1261, 1259, 1259, 1284, 1262, 1260,
     1260, 1257, 1263, 1261, 1261, 1264,    0, 1262, 1262, 1263,
     1259, 1261, 1264, 1284, 1284,    0, 1265,    0, 1263, 1263,
        0, 1264, 1264, 1265, 1266,    0,    0, 1267,    0,    0,
     1264, 1266, 1265, 1265, 1267, 1268, 1265,    0,    0,    0,
     1266, 1266, 1268, 1267, 1267,    0, 1269,    0,    0, 1270,

        0, 1268, 1268, 1269, 1271, 1266, 1270, 1268,    0,    0,
        0, 1271, 1269, 1269,    0, 1270, 1270, 1272,    0, 1273,
     1271, 1271, 1274,    0, 1272, 1275, 1273, 1270,    0, 1274,
     1271,    0, 1275, 1272, 1272, 1273, 1273, 1273, 1274, 1274,
        0, 1275, 1275, 1272, 1276,    0, 1277,    0, 1278,    0,
     1279, 1276,    0, 1277, 1276, 1278, 1275, 1279,    0, 1274,
     1276, 1276, 1277, 1277, 1278, 1278, 1279, 1279, 1278, 1280,
        0, 1277, 1281,    0, 1279, 1282, 1280,    0, 1283, 1281,
        0,    0, 1282, 1285,    0, 1280, 1280,    0, 1281, 1281,
     1286, 1282, 1282, 1280, 1283, 1283, 1287, 1282,    0, 1285,

     1285, 1288,    0, 1281, 1289,    0, 1286, 1286, 1290,    0,
        0, 1291, 1287, 1287, 1283, 1292,    0, 1288, 1288, 1293,
     1289, 1289, 1294,    0, 1290, 1290, 1286, 1291, 1291,    0,
        0, 1292, 1292, 1295,    0, 1293, 1293, 1296, 1294, 1294,
     1297,    0,    0, 1298, 1294, 1299, 1292,    0, 1300, 1295,
     1295, 1291, 1299, 1296, 1296, 1300, 1297, 1297, 1295, 1298,
     1298, 1299, 1299, 1296, 1300, 1300, 1301,    0,    0, 1302,
        0,    0, 1303, 1301, 1304,    0, 1302, 1318,    0, 1303,
        0, 1304, 1301, 1301, 1299, 1302, 1302, 1300, 1303, 1303,
     1304, 1304,    0, 1318, 1318, 1305,    0, 1306,    0, 1307,

     1304, 1302, 1305, 1301, 1306,    0, 1307,    0,    0, 1303,
        0, 1305, 1305, 1306, 1306, 1307, 1307, 1305,    0,    0,
     1308, 1306, 1309,    0, 1310,    0,    0, 1308, 1321, 1309,
     1322, 1310,    0,    0,    0, 1307, 1308, 1308, 1309, 1309,
     1310, 1310, 1311,    0, 1321, 1321, 1322, 1322, 1312, 1311,
     1313,    0,    0, 1316,    0, 1312,    0, 1313, 1311, 1311,
     1316, 1309, 1322, 1310, 1312, 1312, 1313, 1313, 1314, 1316,
     1316,    0, 1319,    0, 1315, 1314, 1317, 1316,    0, 1311,
     1312, 1315, 1320, 1317, 1314, 1314, 1336, 1313, 1319, 1319,
     1315, 1315, 1317, 1317, 1314,    0, 1315, 1323, 1320, 1320,

     1324,    0, 1336, 1336, 1323,    0,    0, 1324, 1325, 1319,
        0,    0, 1317, 1323, 1323, 1325, 1324, 1324, 1320, 1323,
     1326,    0, 1324, 1327, 1325, 1325, 1328, 1326, 1329,    0,
     1327, 1330,    0, 1328, 1325, 1329, 1326, 1326, 1330, 1327,
     1327,    0, 1328, 1328, 1329, 1329, 1328, 1330, 1330, 1331,
        0, 1332,    0, 1333,    0, 1326, 1331,    0, 1332,    0,
     1333,    0,    0,    0,    0, 1331, 1331, 1332, 1332, 1333,
     1333, 1331, 1337, 1332, 1334,    0, 1335,    0, 1338, 1333,
        0, 1334,    0, 1335,    0, 1338,    0,    0, 1337, 1337,
     1334, 1334, 1335, 1335, 1338, 1338, 1335, 1339,    0, 1340,

        0, 1341,    0, 1337, 1339, 1342, 1340, 1343, 1341, 1334,
        0,    0, 1342, 1339, 1339, 1340, 1340, 1341, 1341, 1344,
        0, 1342, 1342, 1343, 1343, 1345, 1344, 1346,    0,    0,
        0, 1340, 1345,    0, 1346, 1344, 1344, 1342,    0,    0,
        0, 1345, 1345, 1346, 1346,    0,    0,    0,    0,    0,
     1344,    0,    0,    0,    0,    0, 1345, 1348, 1348, 1348,
     1348, 1348, 1348, 1348, 1348, 1348, 1348, 1348, 1349, 1349,
     1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1349, 1350,
     1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350, 1350,
     1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351, 1351,

     1351, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352, 1352,
     1352, 1352, 1353, 1353,    0,    0, 1353, 1353, 1353, 1354,
        0, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355,
     1355,    0,    0, 1355, 1355, 1355, 1356,    0, 1356, 1356,
     1356, 1356, 1356, 1356, 1356, 1356, 1357, 1357,    0,    0,
     1357, 1357, 1357, 1358,    0, 1358, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1359, 1359,    0,    0, 1359, 1359, 1359,
     1360,    0, 1360, 1360, 1360, 1360, 1360, 1360, 1360, 1360,
     1361, 1361,    0,    0, 1361, 1361, 1361, 1362,    0, 1362,
     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363,    0,    0,

        0, 1363,    0, 1363, 1363,    0, 1363, 1363, 1364,    0,
        0, 1364, 1364,    0, 1364, 1364, 1364, 1364, 1364, 1365,
     1365,    0, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1366,    0, 1366, 1366,    0,    0, 1366,    0, 1366, 1367,
     1367, 1367, 1367, 1367,    0, 1367, 1368, 1368, 1368, 1368,
     1368,    0, 1368, 1369, 1369, 1369, 1369, 1369,    0, 1369,
     1370, 1370, 1370, 1370, 1370,    0, 1370, 1371, 1371, 1371,
     1371, 1371,    0, 1371, 1372,    0, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1373,    0,    0,    0, 1373, 1373,
     1373, 1373, 1373, 1373, 1373, 1374,    0, 1374, 1374, 1374,

     1374, 1374, 1374, 1374, 1374, 1375,    0,    0,    0, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1376,    0, 1376, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1377,    0,    0,    0,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1378,    0,    0,
        0, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379,    0,
     1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1380,    0,
        0,    0, 1380, 1380, 1380, 1380, 1380, 1380, 1380, 1381,
        0, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1381, 1382,
        0,    0,    0, 1382, 1382, 1382, 1382, 1382, 1382, 1382,
     1383, 1383,    0, 1383, 1383, 1383, 1383, 1383, 1383, 1383,

     1383, 1384,    0,    0,    0, 1384, 1384, 1384, 1384, 1384,
     1384, 1384, 1385,    0,    0,    0, 1385, 1385, 1385, 1385,
     1385, 1385, 1385, 1386, 1386,    0, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1386, 1387,    0,    0,    0, 1387, 1387,
     1387, 1387, 1387, 1387, 1387, 1388,    0,    0,    0, 1388,
     1388, 1388, 1388, 1388, 1388, 1388, 1389, 1389,    0, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1389, 1390,    0,    0,
        0, 1390, 1390, 1390, 1390, 1390, 1390, 1390, 1391,    0,
        0,    0, 1391, 1391, 1391, 1391, 1391, 1391, 1391, 1392,
        0,    0,    0, 1392, 1392, 1392, 1392, 1392, 1392, 1392,

     1393, 1393,    0, 1393, 1393, 1393, 1393, 1393, 1393, 1393,
     1393, 1394,    0,    0,    0, 1394, 1394, 1394, 1394, 1394,
     1394, 1394, 1395,    0,    0,    0, 1395, 1395, 1395, 1395,
     1395, 1395, 1395, 1396, 1396,    0, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1397,    0,    0,    0, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1398,    0,    0,    0, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1399, 1399,    0, 1399,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1400,    0,    0,
        0, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1401, 1401,
        0, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1401, 1402,

     1402,    0, 1402, 1402, 1402, 1402, 1402, 1402, 1402, 1402,
     1403,    0,    0,    0, 1403, 1403, 1403, 1403, 1403, 1403,
     1403, 1404,    0,    0,    0, 1404, 1404, 1404, 1404, 1404,
     1404, 1404, 1405, 1405,    0, 1405, 1405, 1405, 1405, 1405,
     1405, 1405, 1405, 1406, 1406,    0,    0, 1406, 1406, 1406,
     1407, 1407,    0, 1407, 1407, 1407, 1407, 1407, 1407, 1407,
     1407, 1408,    0,    0,    0, 1408, 1408, 1408, 1408, 1408,
     1408, 1408, 1409,    0,    0,    0, 1409, 1409, 1409, 1409,
     1409, 1409, 1409, 1410, 1410,    0, 1410, 1410, 1410, 1410,
     1410, 1410, 1410, 1410, 1411, 1411,    0, 1411, 1411, 1411,

     1411, 1411, 1411, 1411, 1411, 1412,    0,    0,    0, 1412,
     1412, 1412, 1412, 1412, 1412, 1412, 1413, 1413,    0, 1413,
     1413, 1413, 1413, 1413, 1413, 1413, 1413, 1414,    0,    0,
        0, 1414, 1414, 1414, 1414, 1414, 1414, 1414, 1415,    0,
        0,    0, 1415, 1415, 1415, 1415, 1415, 1415, 1415, 1416,
     1416,    0, 1416, 1416, 1416, 1416, 1416, 1416, 1416, 1416,
     1417, 1417,    0,    0, 1417, 1417, 1417, 1418, 1418,    0,
     1418, 1418, 1418, 1418, 1418, 1418, 1418, 1418, 1419,    0,
        0,    0, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1420,
     1420,    0, 1420, 1420, 1420, 1420, 1420, 1420, 1420, 1420,

     1421,    0,    0,    0, 1421, 1421, 1421, 1421, 1421, 1421,
     1421, 1422,    0,    0,    0, 1422, 1422, 1422, 1422, 1422,
     1422, 1422, 1423, 1423,    0, 1423, 1423, 1423, 1423, 1423,
     1423, 1423, 1423, 1424, 1424,    0,    0, 1424, 1424, 1424,
     1425, 1425,    0, 1425, 1425, 1425, 1425, 1425, 1425, 1425,
     1425, 1426,    0,    0,    0, 1426, 1426, 1426, 1426, 1426,
     1426, 1426, 1427,    0,    0,    0, 1427, 1427, 1427, 1427,
     1427, 1427, 1427, 1428, 1428,    0, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1429, 1429,    0, 1429, 1429, 1429,
     1429, 1429, 1429, 1429, 1429, 1430, 1430,    0,    0, 1430,

     1430, 1430, 1431, 1431,    0, 1431, 1431, 1431, 1431, 1431,
     1431, 1431, 1431, 1432, 1432,    0, 1432, 1432, 1432, 1432,
     1432, 1432, 1432, 1432, 1433, 1433,    0, 1433, 1433, 1433,
     1433, 1433, 1433, 1433, 1433, 1434, 1434,    0, 1434, 1434,
     1434, 1434, 1434, 1434, 1434, 1434, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347, 1347,

     1347, 1347, 1347
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 28 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;
#line 2963 "<stdout>"

#line 2965 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state ( int _new_state );
    
    static void yy_pop_state ( void );
    
    static int yy_top_state ( void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 120 "../../../src/Mixfix/lexer.ll"

#line 122 "../../../src/Mixfix/lexer.ll"
	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3208 "<stdout>"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1348 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8847 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 125 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 129 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 135 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 136 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 140 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_SLOAD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_LL;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_DSREWRITE;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_CHECK;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_GET;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_CONST;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_STRATS;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_SDS;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
return KW_IRREDUNDANT;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 246 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 247 "../../../src/Mixfix/lexer.ll"
return KW_TEST;
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 248 "../../../src/Mixfix/lexer.ll"
return KW_SMT_SEARCH;
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 249 "../../../src/Mixfix/lexer.ll"
return KW_VU_NARROW;
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
return KW_FVU_NARROW;
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 251 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 252 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 257 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 271 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 275 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 276 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 277 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 120:
/* rule 120 can match eol */
YY_RULE_SETUP
#line 278 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 121:
/* rule 121 can match eol */
YY_RULE_SETUP
#line 282 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 122:
/* rule 122 can match eol */
YY_RULE_SETUP
#line 286 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 291 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 124:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)		// both strategy attribute and declaration
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASTRAT)		// strategy attribute only
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DSTRAT)		// declaration of a strategy only
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 333 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 334 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 341 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 343 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 344 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 345 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 346 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 347 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 348 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SD)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 349 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CSD)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 350 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 351 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 352 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 353 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 354 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 355 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 356 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSIGN)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 357 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 179:
/* rule 179 can match eol */
YY_RULE_SETUP
#line 358 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 180:
/* rule 180 can match eol */
YY_RULE_SETUP
#line 359 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 181:
YY_RULE_SETUP
#line 366 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 372 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 378 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 384 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 390 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 396 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 402 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ASSIGN) && lexerBubble.length() >= minLength)
					    EXIT(KW_ASSIGN)
					  else
					    STORE
					}
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 408 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 414 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 420 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 429 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 433 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 444 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 445 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 195:
/* rule 195 can match eol */
YY_RULE_SETUP
#line 456 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 196:
/* rule 196 can match eol */
YY_RULE_SETUP
#line 467 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 197:
YY_RULE_SETUP
#line 476 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 484 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 199:
YY_RULE_SETUP
#line 492 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 200:
/* rule 200 can match eol */
YY_RULE_SETUP
#line 496 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 500 "../../../src/Mixfix/lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 202:
YY_RULE_SETUP
#line 512 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 518 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 519 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 520 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 521 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 522 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 523 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 532 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 210:
YY_RULE_SETUP
#line 541 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 547 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 548 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 213:
YY_RULE_SETUP
#line 557 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 214:
/* rule 214 can match eol */
YY_RULE_SETUP
#line 562 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 215:
YY_RULE_SETUP
#line 571 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 572 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 577 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 591 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 595 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 220:
/* rule 220 can match eol */
YY_RULE_SETUP
#line 599 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 603 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 606 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 612 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 223:
/* rule 223 can match eol */
YY_RULE_SETUP
#line 613 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 614 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 619 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4673 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1348 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1348 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1347);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_size_t) (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc( new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc(
					(void *) (yy_start_stack), new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree( (yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 619 "../../../src/Mixfix/lexer.ll"


#include "lexerAux.cc"

